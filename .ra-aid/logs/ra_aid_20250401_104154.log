2025-04-01 10:50:40,691 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkBX3X7T4/QSbG9rsyvTQI2/GPGhcoiR3cOCrzCvVy/IqFhqSN29ipo0SgzlYOkyDY6Kc6e9QizTOcl9kc5/ZsxEEgwmzDGms/2wfDWP+CAaDLp1BAHvPVoS1jZRbyIwz/+dzbMc/JxPk5ERYLuyEP56D3IZT+XG2YKhRKaka1cBHRbdPlNgsMJhe9koYmL4Kh1PXrQSCsd/iJMlVJNlFEuphtXILcvrWwIm3R/VyA==', 'thinking': "Let me understand the task: The user wants to transform this project into a calculator system. There's already a basic calculator component at `/components/PrevCalculator`. I need to explore the project structure and understand what exists, focusing especially on the PrevCalculator component and related files.\n\nI'll start by examining the project structure focusing on the PrevCalculator component and related files.\n\nLet's first look at the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll investigate the existing calculator component and related files to understand what needs to be transformed.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013KohLUBMFyvFNpT1tqrUDt'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013KohLUBMFyvFNpT1tqrUDt', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': 'Let me examine the related files for the PrevCalculator component:', 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_01FnAwHcpxR7K89mGgiu3SKY'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_01FnAwHcpxR7K89mGgiu3SKY', 'is_error': False}]}, {'role': 'assistant', 'content': [{'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/DataVisualizer.tsx'}, 'id': 'toolu_011vVv5MKLLUxEW1HNrr7KBY'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Typography from \'@mui/material/Typography\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Interface for the exported data\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\ninterface DataVisualizerProps {\\n  data: ExportData;\\n}\\n\\nconst DataVisualizer: React.FC<DataVisualizerProps> = ({ data }) => {\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n\\n  // Preparar dados para o gráfico de projeção\\n  const chartData = data.projecao.anos.map((ano, index) => ({\\n    idade: ano,\\n    saldoPGBL: data.projecao.saldosPGBL[index],\\n    saldoVGBL: data.projecao.saldosVGBL[index],\\n    saldoReinvestido: data.projecao.saldosReinvestidos ? data.projecao.saldosReinvestidos[index] : 0\\n  }));\\n\\n  // Preparar dados para o gráfico de comparação\\n  const comparisonData = [\\n    {\\n      name: \'PGBL\',\\n      saldo: data.resultados.saldoPGBL,\\n      rendaLiquida: data.resultados.rendaLiquidaPGBL * 12 * 20, // 20 anos de recebimento\\n      contribuicao: data.resultados.contribuicaoPGBL\\n    },\\n    {\\n      name: \'VGBL\',\\n      saldo: data.resultados.saldoVGBL,\\n      rendaLiquida: data.resultados.rendaLiquidaVGBL * 12 * 20, // 20 anos de recebimento\\n      contribuicao: data.resultados.contribuicaoPGBL // Mesmo valor de contribuição\\n    }\\n  ];\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Typography variant=\\"h4\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'bold\', mb: 4 }}>\\n        Visualização de Dados Previdenciários\\n      </Typography>\\n\\n      {/* Dados Pessoais */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Dados Pessoais\\n        </Typography>\\n        <Grid container spacing={2}>\\n          <Grid item xs={12} sm={6}>\\n            <Typography variant=\\"body1\\">\\n              <strong>Nome:</strong> {data.dadosPessoais.nome || \'Não informado\'}\\n            </Typography>\\n            <Typography variant=\\"body1\\">\\n              <strong>Idade Atual:</strong> {data.dadosPessoais.idade} anos\\n            </Typography>\\n          </Grid>\\n          <Grid item xs={12} sm={6}>\\n            <Typography variant=\\"body1\\">\\n              <strong>Idade de Aposentadoria:</strong> {data.dadosPessoais.idadeAposentadoria} anos\\n            </Typography>\\n            <Typography variant=\\"body1\\">\\n              <strong>Salário Mensal:</strong> {formatCurrency(data.dadosPessoais.salarioMensal)}\\n            </Typography>\\n          </Grid>\\n        </Grid>\\n      </Paper>\\n\\n      {/* Resultados */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Resultados na Aposentadoria\\n        </Typography>\\n        <TableContainer>\\n          <Table>\\n            <TableHead>\\n              <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                <TableCell>Categoria</TableCell>\\n                <TableCell align=\\"right\\">PGBL</TableCell>\\n                <TableCell align=\\"right\\">VGBL</TableCell>\\n                <TableCell align=\\"right\\">Diferença</TableCell>\\n              </TableRow>\\n            </TableHead>\\n            <TableBody>\\n              <TableRow>\\n                <TableCell>Contribuição Mensal</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBLMensal)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBLMensal)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n              </TableRow>\\n              <TableRow>\\n                <TableCell>Contribuição Total</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n              </TableRow>\\n              <TableRow>\\n                <TableCell>Saldo Acumulado</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoVGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoVGBL - data.resultados.saldoPGBL)}</TableCell>\\n              </TableRow>\\n              {data.resultados.saldoReinvestido !== undefined && (\\n                <TableRow>\\n                  <TableCell>Saldo Reinvestido</TableCell>\\n                  <TableCell align=\\"right\\">-</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoReinvestido)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoReinvestido)}</TableCell>\\n                </TableRow>\\n              )}\\n              <TableRow>\\n                <TableCell>Renda Líquida Mensal</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.rendaLiquidaPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.rendaLiquidaVGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.rendaLiquidaVGBL - data.resultados.rendaLiquidaPGBL)}</TableCell>\\n              </TableRow>\\n              <TableRow>\\n                <TableCell>Economia IR Total</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.economiaIRTotal)}</TableCell>\\n                <TableCell align=\\"right\\">-</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.economiaIRTotal)}</TableCell>\\n              </TableRow>\\n            </TableBody>\\n          </Table>\\n        </TableContainer>\\n\\n        <Box sx={{ mt: 3, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n          <Typography variant=\\"subtitle1\\" fontWeight=\\"bold\\" gutterBottom>\\n            Recomendação:\\n          </Typography>\\n          <Typography variant=\\"body1\\">\\n            {data.resultados.recomendacao}\\n          </Typography>\\n        </Box>\\n      </Paper>\\n\\n      {/* Gráfico de Projeção */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Projeção de Saldo ao Longo do Tempo\\n        </Typography>\\n        <Box sx={{ height: 400, mt: 2 }}>\\n          <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n            <LineChart\\n              data={chartData}\\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n            >\\n              <CartesianGrid strokeDasharray=\\"3 3\\" />\\n              <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n              <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n              <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n              <Legend />\\n              <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n              <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n              {data.projecao.saldosReinvestidos && (\\n                <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n              )}\\n            </LineChart>\\n          </ResponsiveContainer>\\n        </Box>\\n      </Paper>\\n\\n      {/* Gráfico de Comparação */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo PGBL vs VGBL\\n        </Typography>\\n        <Box sx={{ height: 400, mt: 2 }}>\\n          <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n            <BarChart\\n              data={comparisonData}\\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n            >\\n              <CartesianGrid strokeDasharray=\\"3 3\\" />\\n              <XAxis dataKey=\\"name\\" />\\n              <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n              <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n              <Legend />\\n              <Bar dataKey=\\"saldo\\" name=\\"Saldo Acumulado\\" fill=\\"#012B09\\" />\\n              <Bar dataKey=\\"rendaLiquida\\" name=\\"Renda Líquida Total (20 anos)\\" fill=\\"#82ca9d\\" />\\n              <Bar dataKey=\\"contribuicao\\" name=\\"Contribuição Total\\" fill=\\"#8884d8\\" />\\n            </BarChart>\\n          </ResponsiveContainer>\\n        </Box>\\n      </Paper>\\n\\n      {/* Resumo */}\\n      <Paper sx={{ p: 3, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Resumo\\n        </Typography>\\n        <Typography variant=\\"body1\\" paragraph>\\n          Com base nos parâmetros informados, o investimento em {data.resultados.rendaLiquidaPGBL > data.resultados.rendaLiquidaVGBL ? \'PGBL\' : \'VGBL\'} apresenta-se como a opção mais vantajosa para o seu perfil.\\n        </Typography>\\n        <Typography variant=\\"body1\\" paragraph>\\n          A diferença de renda líquida mensal entre as opções é de {formatCurrency(Math.abs(data.resultados.rendaLiquidaPGBL - data.resultados.rendaLiquidaVGBL))}.\\n        </Typography>\\n        <Typography variant=\\"body1\\">\\n          Recomenda-se consultar um especialista em direito previdenciário para avaliar as melhores estratégias para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n        </Typography>\\n      </Paper>\\n    </Box>\\n  );\\n};\\n\\nexport default DataVisualizer;\\n"}', 'tool_use_id': 'toolu_011vVv5MKLLUxEW1HNrr7KBY', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:50:40,701 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:50:40,702 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:50:40,702 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:50:40,702 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:50:40,703 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:50:40,703 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:50:40,964 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:50:40 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:50:40Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:52:44Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:50:40Z'), (b'retry-after', b'123'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:50:40Z'), (b'request-id', b'req_01Ehx1R2PrpnvT2cLAQTE5ms'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'92988e90acafde31-GRU')])
2025-04-01 10:50:40,965 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:50:40,965 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:50:40,966 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:50:40,966 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:50:40,966 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:50:40,966 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:50:40 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:50:40Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:52:44Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:50:40Z', 'retry-after': '123', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:50:40Z', 'request-id': 'req_01Ehx1R2PrpnvT2cLAQTE5ms', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '92988e90acafde31-GRU'})
2025-04-01 10:50:40,966 - anthropic._base_client - DEBUG - request_id: req_01Ehx1R2PrpnvT2cLAQTE5ms
2025-04-01 10:50:40,966 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:50:40,968 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:50:40,968 - anthropic._base_client - DEBUG - 1 retry left
2025-04-01 10:50:40,968 - anthropic._base_client - INFO - Retrying request to /v1/messages in 6.832995 seconds
2025-04-01 10:50:47,806 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkBX3X7T4/QSbG9rsyvTQI2/GPGhcoiR3cOCrzCvVy/IqFhqSN29ipo0SgzlYOkyDY6Kc6e9QizTOcl9kc5/ZsxEEgwmzDGms/2wfDWP+CAaDLp1BAHvPVoS1jZRbyIwz/+dzbMc/JxPk5ERYLuyEP56D3IZT+XG2YKhRKaka1cBHRbdPlNgsMJhe9koYmL4Kh1PXrQSCsd/iJMlVJNlFEuphtXILcvrWwIm3R/VyA==', 'thinking': "Let me understand the task: The user wants to transform this project into a calculator system. There's already a basic calculator component at `/components/PrevCalculator`. I need to explore the project structure and understand what exists, focusing especially on the PrevCalculator component and related files.\n\nI'll start by examining the project structure focusing on the PrevCalculator component and related files.\n\nLet's first look at the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll investigate the existing calculator component and related files to understand what needs to be transformed.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013KohLUBMFyvFNpT1tqrUDt'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013KohLUBMFyvFNpT1tqrUDt', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': 'Let me examine the related files for the PrevCalculator component:', 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_01FnAwHcpxR7K89mGgiu3SKY'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_01FnAwHcpxR7K89mGgiu3SKY', 'is_error': False}]}, {'role': 'assistant', 'content': [{'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/DataVisualizer.tsx'}, 'id': 'toolu_011vVv5MKLLUxEW1HNrr7KBY'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Typography from \'@mui/material/Typography\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Interface for the exported data\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\ninterface DataVisualizerProps {\\n  data: ExportData;\\n}\\n\\nconst DataVisualizer: React.FC<DataVisualizerProps> = ({ data }) => {\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n\\n  // Preparar dados para o gráfico de projeção\\n  const chartData = data.projecao.anos.map((ano, index) => ({\\n    idade: ano,\\n    saldoPGBL: data.projecao.saldosPGBL[index],\\n    saldoVGBL: data.projecao.saldosVGBL[index],\\n    saldoReinvestido: data.projecao.saldosReinvestidos ? data.projecao.saldosReinvestidos[index] : 0\\n  }));\\n\\n  // Preparar dados para o gráfico de comparação\\n  const comparisonData = [\\n    {\\n      name: \'PGBL\',\\n      saldo: data.resultados.saldoPGBL,\\n      rendaLiquida: data.resultados.rendaLiquidaPGBL * 12 * 20, // 20 anos de recebimento\\n      contribuicao: data.resultados.contribuicaoPGBL\\n    },\\n    {\\n      name: \'VGBL\',\\n      saldo: data.resultados.saldoVGBL,\\n      rendaLiquida: data.resultados.rendaLiquidaVGBL * 12 * 20, // 20 anos de recebimento\\n      contribuicao: data.resultados.contribuicaoPGBL // Mesmo valor de contribuição\\n    }\\n  ];\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Typography variant=\\"h4\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'bold\', mb: 4 }}>\\n        Visualização de Dados Previdenciários\\n      </Typography>\\n\\n      {/* Dados Pessoais */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Dados Pessoais\\n        </Typography>\\n        <Grid container spacing={2}>\\n          <Grid item xs={12} sm={6}>\\n            <Typography variant=\\"body1\\">\\n              <strong>Nome:</strong> {data.dadosPessoais.nome || \'Não informado\'}\\n            </Typography>\\n            <Typography variant=\\"body1\\">\\n              <strong>Idade Atual:</strong> {data.dadosPessoais.idade} anos\\n            </Typography>\\n          </Grid>\\n          <Grid item xs={12} sm={6}>\\n            <Typography variant=\\"body1\\">\\n              <strong>Idade de Aposentadoria:</strong> {data.dadosPessoais.idadeAposentadoria} anos\\n            </Typography>\\n            <Typography variant=\\"body1\\">\\n              <strong>Salário Mensal:</strong> {formatCurrency(data.dadosPessoais.salarioMensal)}\\n            </Typography>\\n          </Grid>\\n        </Grid>\\n      </Paper>\\n\\n      {/* Resultados */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Resultados na Aposentadoria\\n        </Typography>\\n        <TableContainer>\\n          <Table>\\n            <TableHead>\\n              <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                <TableCell>Categoria</TableCell>\\n                <TableCell align=\\"right\\">PGBL</TableCell>\\n                <TableCell align=\\"right\\">VGBL</TableCell>\\n                <TableCell align=\\"right\\">Diferença</TableCell>\\n              </TableRow>\\n            </TableHead>\\n            <TableBody>\\n              <TableRow>\\n                <TableCell>Contribuição Mensal</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBLMensal)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBLMensal)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n              </TableRow>\\n              <TableRow>\\n                <TableCell>Contribuição Total</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.contribuicaoPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n              </TableRow>\\n              <TableRow>\\n                <TableCell>Saldo Acumulado</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoVGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoVGBL - data.resultados.saldoPGBL)}</TableCell>\\n              </TableRow>\\n              {data.resultados.saldoReinvestido !== undefined && (\\n                <TableRow>\\n                  <TableCell>Saldo Reinvestido</TableCell>\\n                  <TableCell align=\\"right\\">-</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoReinvestido)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(data.resultados.saldoReinvestido)}</TableCell>\\n                </TableRow>\\n              )}\\n              <TableRow>\\n                <TableCell>Renda Líquida Mensal</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.rendaLiquidaPGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.rendaLiquidaVGBL)}</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.rendaLiquidaVGBL - data.resultados.rendaLiquidaPGBL)}</TableCell>\\n              </TableRow>\\n              <TableRow>\\n                <TableCell>Economia IR Total</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.economiaIRTotal)}</TableCell>\\n                <TableCell align=\\"right\\">-</TableCell>\\n                <TableCell align=\\"right\\">{formatCurrency(data.resultados.economiaIRTotal)}</TableCell>\\n              </TableRow>\\n            </TableBody>\\n          </Table>\\n        </TableContainer>\\n\\n        <Box sx={{ mt: 3, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n          <Typography variant=\\"subtitle1\\" fontWeight=\\"bold\\" gutterBottom>\\n            Recomendação:\\n          </Typography>\\n          <Typography variant=\\"body1\\">\\n            {data.resultados.recomendacao}\\n          </Typography>\\n        </Box>\\n      </Paper>\\n\\n      {/* Gráfico de Projeção */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Projeção de Saldo ao Longo do Tempo\\n        </Typography>\\n        <Box sx={{ height: 400, mt: 2 }}>\\n          <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n            <LineChart\\n              data={chartData}\\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n            >\\n              <CartesianGrid strokeDasharray=\\"3 3\\" />\\n              <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n              <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n              <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n              <Legend />\\n              <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n              <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n              {data.projecao.saldosReinvestidos && (\\n                <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n              )}\\n            </LineChart>\\n          </ResponsiveContainer>\\n        </Box>\\n      </Paper>\\n\\n      {/* Gráfico de Comparação */}\\n      <Paper sx={{ p: 3, mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo PGBL vs VGBL\\n        </Typography>\\n        <Box sx={{ height: 400, mt: 2 }}>\\n          <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n            <BarChart\\n              data={comparisonData}\\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n            >\\n              <CartesianGrid strokeDasharray=\\"3 3\\" />\\n              <XAxis dataKey=\\"name\\" />\\n              <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n              <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n              <Legend />\\n              <Bar dataKey=\\"saldo\\" name=\\"Saldo Acumulado\\" fill=\\"#012B09\\" />\\n              <Bar dataKey=\\"rendaLiquida\\" name=\\"Renda Líquida Total (20 anos)\\" fill=\\"#82ca9d\\" />\\n              <Bar dataKey=\\"contribuicao\\" name=\\"Contribuição Total\\" fill=\\"#8884d8\\" />\\n            </BarChart>\\n          </ResponsiveContainer>\\n        </Box>\\n      </Paper>\\n\\n      {/* Resumo */}\\n      <Paper sx={{ p: 3, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Resumo\\n        </Typography>\\n        <Typography variant=\\"body1\\" paragraph>\\n          Com base nos parâmetros informados, o investimento em {data.resultados.rendaLiquidaPGBL > data.resultados.rendaLiquidaVGBL ? \'PGBL\' : \'VGBL\'} apresenta-se como a opção mais vantajosa para o seu perfil.\\n        </Typography>\\n        <Typography variant=\\"body1\\" paragraph>\\n          A diferença de renda líquida mensal entre as opções é de {formatCurrency(Math.abs(data.resultados.rendaLiquidaPGBL - data.resultados.rendaLiquidaVGBL))}.\\n        </Typography>\\n        <Typography variant=\\"body1\\">\\n          Recomenda-se consultar um especialista em direito previdenciário para avaliar as melhores estratégias para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n        </Typography>\\n      </Paper>\\n    </Box>\\n  );\\n};\\n\\nexport default DataVisualizer;\\n"}', 'tool_use_id': 'toolu_011vVv5MKLLUxEW1HNrr7KBY', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:50:47,813 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:50:47,814 - httpcore.connection - DEBUG - close.started
2025-04-01 10:50:47,814 - httpcore.connection - DEBUG - close.complete
2025-04-01 10:50:47,814 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=180.0 socket_options=[(65535, 8, True), (6, 257, 60), (6, 258, 5)]
2025-04-01 10:50:47,848 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc3b710>
2025-04-01 10:50:47,848 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x11c905ed0> server_hostname='api.anthropic.com' timeout=180.0
2025-04-01 10:50:47,887 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11c9da420>
2025-04-01 10:50:47,887 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:50:47,888 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:50:47,888 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:50:47,980 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:50:47,980 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:50:48,220 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:50:48 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:50:48Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:52:44Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:50:48Z'), (b'retry-after', b'115'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:50:48Z'), (b'request-id', b'req_01P3zeZtuuiZe53kLkhVrdEP'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'92988ebd9f846254-GRU')])
2025-04-01 10:50:48,221 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:50:48,222 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:50:48,222 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:50:48,222 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:50:48,222 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:50:48,223 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:50:48 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:50:48Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:52:44Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:50:48Z', 'retry-after': '115', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:50:48Z', 'request-id': 'req_01P3zeZtuuiZe53kLkhVrdEP', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '92988ebd9f846254-GRU'})
2025-04-01 10:50:48,223 - anthropic._base_client - DEBUG - request_id: req_01P3zeZtuuiZe53kLkhVrdEP
2025-04-01 10:50:48,223 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:50:48,226 - anthropic._base_client - DEBUG - Re-raising status error
2025-04-01 10:50:48,227 - ra_aid.ra_aid.agent_utils - INFO - API error (attempt 5/20): Error code: 429 - {'type': 'error', 'error': {'type': 'rate_limit_error', 'message': 'This request would exceed the rate limit for your organization (35cc1445-9940-4933-8d6e-6601fd32386d) of 40,000 input tokens per minute. For details, refer to: https://docs.anthropic.com/en/api/rate-limits. You can see the response headers for current usage. Please reduce the prompt length or the maximum tokens requested, or try again later. You may also contact sales at https://www.anthropic.com/contact-sales to discuss your options for a rate limit increase.'}}
2025-04-01 10:50:48,228 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" ORDER BY "t1"."created_at" DESC LIMIT ?', [1])
2025-04-01 10:50:48,231 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" WHERE ("t1"."id" = ?) LIMIT ? OFFSET ?', [1, 1, 0])
2025-04-01 10:50:48,231 - peewee - DEBUG - ('INSERT INTO "trajectory" ("created_at", "updated_at", "human_input_id", "tool_name", "tool_parameters", "tool_result", "step_data", "record_type", "current_cost", "input_tokens", "output_tokens", "is_error", "error_message", "error_type", "error_details", "session_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [datetime.datetime(2025, 4, 1, 10, 50, 48, 231342), datetime.datetime(2025, 4, 1, 10, 50, 48, 231377), 1, '', None, None, '{"error_message": "Encountered RateLimitError: Error code: 429 - {\'type\': \'error\', \'error\': {\'type\': \'rate_limit_error\', \'message\': \'This request would exceed the rate limit for your organization (35cc1445-9940-4933-8d6e-6601fd32386d) of 40,000 input tokens per minute. For details, refer to: https://docs.anthropic.com/en/api/rate-limits. You can see the response headers for current usage. Please reduce the prompt length or the maximum tokens requested, or try again later. You may also contact sales at https://www.anthropic.com/contact-sales to discuss your options for a rate limit increase.\'}}. Retrying in 16s... (Attempt 5/20)", "display_title": "Rate Limit Hit"}', 'error', None, None, None, True, "Encountered RateLimitError: Error code: 429 - {'type': 'error', 'error': {'type': 'rate_limit_error', 'message': 'This request would exceed the rate limit for your organization (35cc1445-9940-4933-8d6e-6601fd32386d) of 40,000 input tokens per minute. For details, refer to: https://docs.anthropic.com/en/api/rate-limits. You can see the response headers for current usage. Please reduce the prompt length or the maximum tokens requested, or try again later. You may also contact sales at https://www.anthropic.com/contact-sales to discuss your options for a rate limit increase.'}}. Retrying in 16s... (Attempt 5/20)", None, None, 3])
2025-04-01 10:50:48,232 - ra_aid.ra_aid.database.repositories.trajectory_repository - DEBUG - Created trajectory record ID 21 of type: error
2025-04-01 10:50:48,233 - markdown_it.rules_block.code - DEBUG - entering code: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.fence - DEBUG - entering fence: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.blockquote - DEBUG - entering blockquote: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.hr - DEBUG - entering hr: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.list - DEBUG - entering list: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.reference - DEBUG - entering reference: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.html_block - DEBUG - entering html_block: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.heading - DEBUG - entering heading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.lheading - DEBUG - entering lheading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:50:48,233 - markdown_it.rules_block.paragraph - DEBUG - entering paragraph: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:51:04,294 - ra_aid.ra_aid.agent_utils - DEBUG - Attempt 6/20
2025-04-01 10:51:04,296 - ra_aid.ra_aid.agent_utils - DEBUG - Cost tracking is disabled, skipping callback handler
2025-04-01 10:51:04,296 - ra_aid.ra_aid.agent_utils - DEBUG - Using stream_config for agent.stream(): {'recursion_limit': 100, 'max_test_cmd_retries': 3, 'max_tool_failures': 3, 'fallback_tool_model_limit': 5, 'retry_fallback_count': 3, 'test_cmd_timeout': 300, 'show_cost': False, 'track_cost': False, 'valid_providers': ['anthropic', 'openai', 'openrouter', 'openai-compatible', 'deepseek', 'gemini', 'ollama', 'fireworks', 'groq'], 'provider': 'anthropic', 'model': 'claude-3-7-sonnet-20250219', 'num_ctx': 262144, 'expert_provider': 'anthropic', 'expert_model': 'claude-3-7-sonnet-20250219', 'expert_num_ctx': 262144, 'temperature': 1.0, 'experimental_fallback_handler': False, 'web_research_enabled': False, 'show_thoughts': False, 'force_reasoning_assistance': False, 'disable_reasoning_assistance': False, 'custom_tools': None, 'custom_tools_enabled': False, 'configurable': {'thread_id': 'b85cfb1d-6a18-4311-a023-5947efbf3bc7'}, 'research_only': False, 'cowboy_mode': False, 'aider_config': None, 'use_aider': True, 'limit_tokens': True, 'auto_test': False, 'test_cmd': None, 'planner_provider': 'anthropic', 'planner_model': 'claude-3-7-sonnet-20250219', 'research_provider': 'anthropic', 'research_model': 'claude-3-7-sonnet-20250219'}
2025-04-01 10:51:04,312 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:51:04,314 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:51:04,314 - httpcore.connection - DEBUG - close.started
2025-04-01 10:51:04,314 - httpcore.connection - DEBUG - close.complete
2025-04-01 10:51:04,314 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=180.0 socket_options=[(65535, 8, True), (6, 257, 60), (6, 258, 5)]
2025-04-01 10:51:04,348 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc1e600>
2025-04-01 10:51:04,348 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x11c905ed0> server_hostname='api.anthropic.com' timeout=180.0
2025-04-01 10:51:04,547 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc1ca70>
2025-04-01 10:51:04,548 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:51:04,548 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:51:04,548 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:51:04,549 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:51:04,549 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:51:04,874 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:51:04 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:51:04Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:52:44Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:51:04Z'), (b'retry-after', b'55'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:51:04Z'), (b'request-id', b'req_01FzPceBcu4pCr5ZkuiY2U7R'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'92988f25ba05a457-GRU')])
2025-04-01 10:51:04,875 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:51:04,875 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:51:04,875 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:51:04,875 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:51:04,875 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:51:04,876 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:51:04 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:51:04Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:52:44Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:51:04Z', 'retry-after': '55', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:51:04Z', 'request-id': 'req_01FzPceBcu4pCr5ZkuiY2U7R', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '92988f25ba05a457-GRU'})
2025-04-01 10:51:04,876 - anthropic._base_client - DEBUG - request_id: req_01FzPceBcu4pCr5ZkuiY2U7R
2025-04-01 10:51:04,876 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:51:04,877 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:51:04,877 - anthropic._base_client - DEBUG - 5 retries left
2025-04-01 10:51:04,877 - anthropic._base_client - INFO - Retrying request to /v1/messages in 55.000000 seconds
2025-04-01 10:51:59,888 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:51:59,952 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:00,032 - httpcore.connection - DEBUG - close.started
2025-04-01 10:52:00,032 - httpcore.connection - DEBUG - close.complete
2025-04-01 10:52:00,032 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=180.0 socket_options=[(65535, 8, True), (6, 257, 60), (6, 258, 5)]
2025-04-01 10:52:00,066 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc1c6e0>
2025-04-01 10:52:00,067 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x11c905ed0> server_hostname='api.anthropic.com' timeout=180.0
2025-04-01 10:52:00,101 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc1e120>
2025-04-01 10:52:00,101 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:00,101 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:00,101 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:00,101 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:00,101 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:07,480 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 01 Apr 2025 13:52:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'999'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:00Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'1000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:53:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:07Z'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'17000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:07Z'), (b'request-id', b'req_011hPtJQgtWSJgtf7hBXndSS'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'92989080e8d8a52b-GRU'), (b'Content-Encoding', b'gzip')])
2025-04-01 10:52:07,481 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-04-01 10:52:07,481 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:07,482 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:07,482 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:07,482 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:07,482 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Tue, 01 Apr 2025 13:52:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '999', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:00Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '1000', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:53:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:07Z', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '17000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:07Z', 'request-id': 'req_011hPtJQgtWSJgtf7hBXndSS', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '92989080e8d8a52b-GRU', 'content-encoding': 'gzip'})
2025-04-01 10:52:07,482 - anthropic._base_client - DEBUG - request_id: req_011hPtJQgtWSJgtf7hBXndSS
2025-04-01 10:52:07,485 - ra_aid.ra_aid.agent_utils - DEBUG - Agent output: {'agent': {'messages': [AIMessage(content=[{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'name': 'read_file_tool', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01Jhti4pk4CcLnx4E3QVtvMM', 'model': 'claude-3-7-sonnet-20250219', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12674, 'output_tokens': 188}, 'model_name': 'claude-3-7-sonnet-20250219'}, name='claude-3-7-sonnet-20250219', id='run-01aa03b4-b899-4ac6-ab6a-cec7c81220e8-0', tool_calls=[{'name': 'read_file_tool', 'args': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'type': 'tool_call'}], usage_metadata={'input_tokens': 12674, 'output_tokens': 188, 'total_tokens': 12862, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}
2025-04-01 10:52:07,486 - markdown_it.rules_block.code - DEBUG - entering code: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,486 - markdown_it.rules_block.fence - DEBUG - entering fence: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,486 - markdown_it.rules_block.blockquote - DEBUG - entering blockquote: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,486 - markdown_it.rules_block.hr - DEBUG - entering hr: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,487 - markdown_it.rules_block.list - DEBUG - entering list: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,487 - markdown_it.rules_block.reference - DEBUG - entering reference: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,487 - markdown_it.rules_block.html_block - DEBUG - entering html_block: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,487 - markdown_it.rules_block.heading - DEBUG - entering heading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,487 - markdown_it.rules_block.lheading - DEBUG - entering lheading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,487 - markdown_it.rules_block.paragraph - DEBUG - entering paragraph: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:07,489 - root - DEBUG - Starting to read file: src/components/PrevCalculator/index.tsx
2025-04-01 10:52:07,490 - root - DEBUG - Read chunk: 8192 bytes, running total: 8192 bytes
2025-04-01 10:52:07,490 - root - DEBUG - Read chunk: 8192 bytes, running total: 16384 bytes
2025-04-01 10:52:07,490 - root - DEBUG - Read chunk: 8192 bytes, running total: 24576 bytes
2025-04-01 10:52:07,490 - root - DEBUG - Read chunk: 8192 bytes, running total: 32768 bytes
2025-04-01 10:52:07,490 - root - DEBUG - Read chunk: 8192 bytes, running total: 40960 bytes
2025-04-01 10:52:07,491 - root - DEBUG - Read chunk: 8192 bytes, running total: 49152 bytes
2025-04-01 10:52:07,491 - root - DEBUG - Read chunk: 8192 bytes, running total: 57344 bytes
2025-04-01 10:52:07,491 - root - DEBUG - Read chunk: 8192 bytes, running total: 65536 bytes
2025-04-01 10:52:07,491 - root - DEBUG - Read chunk: 8192 bytes, running total: 73728 bytes
2025-04-01 10:52:07,491 - root - DEBUG - Read chunk: 5952 bytes, running total: 79680 bytes
2025-04-01 10:52:07,491 - root - DEBUG - File read complete: 79680 bytes in 0.00s
2025-04-01 10:52:07,491 - root - DEBUG - Pre-truncation stats: 79680 bytes, 1860 lines
2025-04-01 10:52:07,491 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" ORDER BY "t1"."created_at" DESC LIMIT ?', [1])
2025-04-01 10:52:07,495 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" WHERE ("t1"."id" = ?) LIMIT ? OFFSET ?', [1, 1, 0])
2025-04-01 10:52:07,496 - peewee - DEBUG - ('INSERT INTO "trajectory" ("created_at", "updated_at", "human_input_id", "tool_name", "tool_parameters", "tool_result", "step_data", "record_type", "current_cost", "input_tokens", "output_tokens", "is_error", "error_message", "error_type", "error_details", "session_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [datetime.datetime(2025, 4, 1, 10, 52, 7, 495731), datetime.datetime(2025, 4, 1, 10, 52, 7, 495757), 1, 'read_file_tool', '{"filepath": "src/components/PrevCalculator/index.tsx", "encoding": "utf-8"}', None, '{"filepath": "src/components/PrevCalculator/index.tsx", "display_title": "File Read", "line_count": 1860, "total_bytes": 79680, "elapsed_time": 0.0017480850219726562}', 'tool_execution', None, None, None, False, None, None, None, 3])
2025-04-01 10:52:07,497 - ra_aid.ra_aid.database.repositories.trajectory_repository - DEBUG - Created trajectory record ID 22 for tool: read_file_tool
2025-04-01 10:52:07,500 - ra_aid.ra_aid.agent_utils - DEBUG - Agent output: {'tools': {'messages': [ToolMessage(content='{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', name='read_file_tool', id='4c33405d-dd3e-4262-a614-7e40da1abb0c', tool_call_id='toolu_013XCwMoagxtaWziV5EzZPJ7')]}}
2025-04-01 10:52:07,503 - ra_aid.ra_aid.agent_utils - DEBUG - Agent output: {'__interrupt__': ()}
2025-04-01 10:52:07,503 - ra_aid.ra_aid.agent_utils - DEBUG - Stream iteration ended; checking agent state for continuation.
2025-04-01 10:52:07,504 - ra_aid.ra_aid.agent_utils - DEBUG - Agent state retrieved: StateSnapshot(values={'messages': [HumanMessage(content='Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n', additional_kwargs={}, response_metadata={}, id='a9a339f4-ea03-4cfd-b14b-4212700bdd2d'), AIMessage(content=[{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'name': 'read_file_tool', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01Jhti4pk4CcLnx4E3QVtvMM', 'model': 'claude-3-7-sonnet-20250219', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12674, 'output_tokens': 188}, 'model_name': 'claude-3-7-sonnet-20250219'}, name='claude-3-7-sonnet-20250219', id='run-01aa03b4-b899-4ac6-ab6a-cec7c81220e8-0', tool_calls=[{'name': 'read_file_tool', 'args': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'type': 'tool_call'}], usage_metadata={'input_tokens': 12674, 'output_tokens': 188, 'total_tokens': 12862, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}}), ToolMessage(content='{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', name='read_file_tool', id='4c33405d-dd3e-4262-a614-7e40da1abb0c', tool_call_id='toolu_013XCwMoagxtaWziV5EzZPJ7')]}, next=('agent',), config={'configurable': {'thread_id': 'b85cfb1d-6a18-4311-a023-5947efbf3bc7', 'checkpoint_ns': '', 'checkpoint_id': '1f00f008-0465-6c86-8002-5ef04515afb2'}}, metadata={'source': 'loop', 'writes': {'tools': {'messages': [ToolMessage(content='{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', name='read_file_tool', id='4c33405d-dd3e-4262-a614-7e40da1abb0c', tool_call_id='toolu_013XCwMoagxtaWziV5EzZPJ7')]}}, 'thread_id': 'b85cfb1d-6a18-4311-a023-5947efbf3bc7', 'max_test_cmd_retries': 3, 'max_tool_failures': 3, 'fallback_tool_model_limit': 5, 'retry_fallback_count': 3, 'test_cmd_timeout': 300, 'show_cost': False, 'track_cost': False, 'provider': 'anthropic', 'model': 'claude-3-7-sonnet-20250219', 'num_ctx': 262144, 'expert_provider': 'anthropic', 'expert_model': 'claude-3-7-sonnet-20250219', 'expert_num_ctx': 262144, 'temperature': 1.0, 'experimental_fallback_handler': False, 'web_research_enabled': False, 'show_thoughts': False, 'force_reasoning_assistance': False, 'disable_reasoning_assistance': False, 'custom_tools_enabled': False, 'research_only': False, 'cowboy_mode': False, 'use_aider': True, 'limit_tokens': True, 'auto_test': False, 'planner_provider': 'anthropic', 'planner_model': 'claude-3-7-sonnet-20250219', 'research_provider': 'anthropic', 'research_model': 'claude-3-7-sonnet-20250219', 'step': 2, 'parents': {}}, created_at='2025-04-01T13:52:07.499661+00:00', parent_config={'configurable': {'thread_id': 'b85cfb1d-6a18-4311-a023-5947efbf3bc7', 'checkpoint_ns': '', 'checkpoint_id': '1f00f008-0442-62ae-8001-29e9375c8bad'}}, tasks=(PregelTask(id='d0c7b8c5-d335-6bb7-4b34-7a87e62a8c19', name='agent', path=('__pregel_pull', 'agent'), error=None, interrupts=(), state=None, result=None),))
2025-04-01 10:52:07,508 - ra_aid.ra_aid.agent_utils - DEBUG - Continuing execution with state.next: ('agent',)
2025-04-01 10:52:07,535 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:52:07,538 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:07,538 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:07,538 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:07,538 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:07,538 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:07,538 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:17,049 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 01 Apr 2025 13:52:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'999'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:07Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:16Z'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:16Z'), (b'request-id', b'req_01PedZ9sJXDyed7J9PDVnazj'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929890af5c1ba52b-GRU'), (b'Content-Encoding', b'gzip')])
2025-04-01 10:52:17,050 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-04-01 10:52:17,050 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:17,050 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:17,050 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:17,050 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:17,051 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Tue, 01 Apr 2025 13:52:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '999', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:07Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:16Z', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:16Z', 'request-id': 'req_01PedZ9sJXDyed7J9PDVnazj', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929890af5c1ba52b-GRU', 'content-encoding': 'gzip'})
2025-04-01 10:52:17,051 - anthropic._base_client - DEBUG - request_id: req_01PedZ9sJXDyed7J9PDVnazj
2025-04-01 10:52:17,055 - root - DEBUG - Starting to read file: src/components/PrevCalculator/ResultadosAposentadoria.tsx
2025-04-01 10:52:17,056 - root - DEBUG - Read chunk: 8192 bytes, running total: 8192 bytes
2025-04-01 10:52:17,056 - root - DEBUG - Read chunk: 8192 bytes, running total: 16384 bytes
2025-04-01 10:52:17,056 - root - DEBUG - Read chunk: 8192 bytes, running total: 24576 bytes
2025-04-01 10:52:17,057 - root - DEBUG - Read chunk: 8192 bytes, running total: 32768 bytes
2025-04-01 10:52:17,057 - root - DEBUG - Read chunk: 5427 bytes, running total: 38195 bytes
2025-04-01 10:52:17,057 - root - DEBUG - File read complete: 38195 bytes in 0.00s
2025-04-01 10:52:17,057 - root - DEBUG - Pre-truncation stats: 38195 bytes, 886 lines
2025-04-01 10:52:17,057 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" ORDER BY "t1"."created_at" DESC LIMIT ?', [1])
2025-04-01 10:52:17,060 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" WHERE ("t1"."id" = ?) LIMIT ? OFFSET ?', [1, 1, 0])
2025-04-01 10:52:17,061 - peewee - DEBUG - ('INSERT INTO "trajectory" ("created_at", "updated_at", "human_input_id", "tool_name", "tool_parameters", "tool_result", "step_data", "record_type", "current_cost", "input_tokens", "output_tokens", "is_error", "error_message", "error_type", "error_details", "session_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [datetime.datetime(2025, 4, 1, 10, 52, 17, 60769), datetime.datetime(2025, 4, 1, 10, 52, 17, 60864), 1, 'read_file_tool', '{"filepath": "src/components/PrevCalculator/ResultadosAposentadoria.tsx", "encoding": "utf-8"}', None, '{"filepath": "src/components/PrevCalculator/ResultadosAposentadoria.tsx", "display_title": "File Read", "line_count": 886, "total_bytes": 38195, "elapsed_time": 0.0014109611511230469}', 'tool_execution', None, None, None, False, None, None, None, 3])
2025-04-01 10:52:17,062 - ra_aid.ra_aid.database.repositories.trajectory_repository - DEBUG - Created trajectory record ID 23 for tool: read_file_tool
2025-04-01 10:52:17,065 - ra_aid.ra_aid.agent_utils - DEBUG - Using stream_config for agent.stream(): {'recursion_limit': 100, 'max_test_cmd_retries': 3, 'max_tool_failures': 3, 'fallback_tool_model_limit': 5, 'retry_fallback_count': 3, 'test_cmd_timeout': 300, 'show_cost': False, 'track_cost': False, 'valid_providers': ['anthropic', 'openai', 'openrouter', 'openai-compatible', 'deepseek', 'gemini', 'ollama', 'fireworks', 'groq'], 'provider': 'anthropic', 'model': 'claude-3-7-sonnet-20250219', 'num_ctx': 262144, 'expert_provider': 'anthropic', 'expert_model': 'claude-3-7-sonnet-20250219', 'expert_num_ctx': 262144, 'temperature': 1.0, 'experimental_fallback_handler': False, 'web_research_enabled': False, 'show_thoughts': False, 'force_reasoning_assistance': False, 'disable_reasoning_assistance': False, 'custom_tools': None, 'custom_tools_enabled': False, 'configurable': {'thread_id': 'b85cfb1d-6a18-4311-a023-5947efbf3bc7'}, 'research_only': False, 'cowboy_mode': False, 'aider_config': None, 'use_aider': True, 'limit_tokens': True, 'auto_test': False, 'test_cmd': None, 'planner_provider': 'anthropic', 'planner_model': 'claude-3-7-sonnet-20250219', 'research_provider': 'anthropic', 'research_model': 'claude-3-7-sonnet-20250219'}
2025-04-01 10:52:17,103 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': "Now, let's examine the ResultadosAposentadoria component which is used by the PrevCalculator:", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_013sAfPYfhc9SCZohN6GqWak'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_013sAfPYfhc9SCZohN6GqWak', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:52:17,106 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:17,106 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:17,106 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:17,106 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:17,106 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:17,106 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:17,719 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:52:17 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:17Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:17Z'), (b'retry-after', b'105'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:17Z'), (b'request-id', b'req_017ukhTk9CdRvTry2dABntcf'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929890eb2840a52b-GRU')])
2025-04-01 10:52:17,720 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:52:17,720 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:17,720 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:17,720 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:17,720 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:17,720 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:52:17 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:17Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:17Z', 'retry-after': '105', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:17Z', 'request-id': 'req_017ukhTk9CdRvTry2dABntcf', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929890eb2840a52b-GRU'})
2025-04-01 10:52:17,720 - anthropic._base_client - DEBUG - request_id: req_017ukhTk9CdRvTry2dABntcf
2025-04-01 10:52:17,720 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:52:17,721 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:52:17,721 - anthropic._base_client - DEBUG - 5 retries left
2025-04-01 10:52:17,721 - anthropic._base_client - INFO - Retrying request to /v1/messages in 0.457688 seconds
2025-04-01 10:52:18,189 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': "Now, let's examine the ResultadosAposentadoria component which is used by the PrevCalculator:", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_013sAfPYfhc9SCZohN6GqWak'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_013sAfPYfhc9SCZohN6GqWak', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:52:18,194 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:18,194 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:18,195 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:18,195 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:18,196 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:18,196 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:18,480 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:52:18 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:18Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:18Z'), (b'retry-after', b'104'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:18Z'), (b'request-id', b'req_017cFkUVUUPQqx3AB37m1yu3'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929890f1f831a52b-GRU')])
2025-04-01 10:52:18,481 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:52:18,481 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:18,481 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:18,481 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:18,481 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:18,481 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:52:18 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:18Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:18Z', 'retry-after': '104', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:18Z', 'request-id': 'req_017cFkUVUUPQqx3AB37m1yu3', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929890f1f831a52b-GRU'})
2025-04-01 10:52:18,481 - anthropic._base_client - DEBUG - request_id: req_017cFkUVUUPQqx3AB37m1yu3
2025-04-01 10:52:18,482 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:52:18,483 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:52:18,483 - anthropic._base_client - DEBUG - 4 retries left
2025-04-01 10:52:18,483 - anthropic._base_client - INFO - Retrying request to /v1/messages in 0.761281 seconds
2025-04-01 10:52:19,250 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': "Now, let's examine the ResultadosAposentadoria component which is used by the PrevCalculator:", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_013sAfPYfhc9SCZohN6GqWak'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_013sAfPYfhc9SCZohN6GqWak', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:52:19,255 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:19,255 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:19,256 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:19,256 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:19,257 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:19,257 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:20,245 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:52:20 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:20Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:20Z'), (b'retry-after', b'102'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:20Z'), (b'request-id', b'req_01Hcp1Ax3zG79UJ7JMG2PrCx'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929890f89816a52b-GRU')])
2025-04-01 10:52:20,246 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:52:20,246 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:20,246 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:20,246 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:20,246 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:20,246 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:52:20 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:20Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:20Z', 'retry-after': '102', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:20Z', 'request-id': 'req_01Hcp1Ax3zG79UJ7JMG2PrCx', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929890f89816a52b-GRU'})
2025-04-01 10:52:20,246 - anthropic._base_client - DEBUG - request_id: req_01Hcp1Ax3zG79UJ7JMG2PrCx
2025-04-01 10:52:20,247 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:52:20,248 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:52:20,248 - anthropic._base_client - DEBUG - 3 retries left
2025-04-01 10:52:20,248 - anthropic._base_client - INFO - Retrying request to /v1/messages in 1.985674 seconds
2025-04-01 10:52:22,244 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': "Now, let's examine the ResultadosAposentadoria component which is used by the PrevCalculator:", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_013sAfPYfhc9SCZohN6GqWak'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_013sAfPYfhc9SCZohN6GqWak', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:52:22,250 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:22,251 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:22,251 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:22,251 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:22,252 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:22,252 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:22,584 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:52:22 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:22Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:22Z'), (b'retry-after', b'100'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:22Z'), (b'request-id', b'req_01NJXYcJHhoimwMo5oET2Fnz'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9298910b4e24a52b-GRU')])
2025-04-01 10:52:22,584 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:52:22,584 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:22,584 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:22,585 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:22,585 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:22,585 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:52:22 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:22Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:22Z', 'retry-after': '100', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:22Z', 'request-id': 'req_01NJXYcJHhoimwMo5oET2Fnz', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '9298910b4e24a52b-GRU'})
2025-04-01 10:52:22,585 - anthropic._base_client - DEBUG - request_id: req_01NJXYcJHhoimwMo5oET2Fnz
2025-04-01 10:52:22,585 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:52:22,586 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:52:22,586 - anthropic._base_client - DEBUG - 2 retries left
2025-04-01 10:52:22,586 - anthropic._base_client - INFO - Retrying request to /v1/messages in 3.262030 seconds
2025-04-01 10:52:25,850 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': "Now, let's examine the ResultadosAposentadoria component which is used by the PrevCalculator:", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_013sAfPYfhc9SCZohN6GqWak'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_013sAfPYfhc9SCZohN6GqWak', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:52:25,856 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:25,856 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:25,857 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:25,857 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:25,857 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:25,857 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:26,112 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:52:26 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:26Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:26Z'), (b'retry-after', b'96'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:26Z'), (b'request-id', b'req_01HkqwMVkuwR8UVp4wJfWQ3a'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'92989121dd88a52b-GRU')])
2025-04-01 10:52:26,112 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:52:26,113 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:26,113 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:26,113 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:26,113 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:26,113 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:52:26 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:26Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:26Z', 'retry-after': '96', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:26Z', 'request-id': 'req_01HkqwMVkuwR8UVp4wJfWQ3a', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '92989121dd88a52b-GRU'})
2025-04-01 10:52:26,113 - anthropic._base_client - DEBUG - request_id: req_01HkqwMVkuwR8UVp4wJfWQ3a
2025-04-01 10:52:26,113 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:52:26,115 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:52:26,115 - anthropic._base_client - DEBUG - 1 retry left
2025-04-01 10:52:26,115 - anthropic._base_client - INFO - Retrying request to /v1/messages in 7.847061 seconds
2025-04-01 10:52:33,963 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDNuVNe22NvoDc4LgL2mJ2pN6QvL3h4tXX8GWYV5I04sJHMG0B17w8Yo6miETjcMPPXoLjLSbaQMKZ2KUvP4XR/EgxQvIskXUsmOuIQ4lMaDC8bh1Bh8YbjgJqQqSIw0U1dElzCS1XzhAvs775RQWsK62JLJyc1vbWhdz8E0Tj0rMvlNYR9gg1t4Rj8Gdf3Kh2Vv4oargZoHtcQz6TREb/pMh3+H2Aqhd7lvvXojA==', 'thinking': "Alright, let's start investigating the codebase with a focus on the PrevCalculator component which the user mentions they want to use as the base for a calculator system. The request is to transform the project into a calculator system using this component.\n\nLet's first look at the structure of the PrevCalculator component:\n\n1. First, let's check what the PrevCalculator component contains:", 'type': 'thinking'}, {'text': "I'll investigate the codebase to understand the current structure, focusing on the PrevCalculator component mentioned in the query.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_013XCwMoagxtaWziV5EzZPJ7'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_013XCwMoagxtaWziV5EzZPJ7', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': "Now, let's examine the ResultadosAposentadoria component which is used by the PrevCalculator:", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_013sAfPYfhc9SCZohN6GqWak'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_013sAfPYfhc9SCZohN6GqWak', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:52:33,969 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:52:33,969 - httpcore.connection - DEBUG - close.started
2025-04-01 10:52:33,969 - httpcore.connection - DEBUG - close.complete
2025-04-01 10:52:33,969 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=180.0 socket_options=[(65535, 8, True), (6, 257, 60), (6, 258, 5)]
2025-04-01 10:52:34,003 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc7ac00>
2025-04-01 10:52:34,003 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x11c905ed0> server_hostname='api.anthropic.com' timeout=180.0
2025-04-01 10:52:34,037 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc7a870>
2025-04-01 10:52:34,037 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:52:34,037 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:52:34,037 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:52:34,100 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:52:34,100 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:52:34,547 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:52:34 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:52:34Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:03Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:52:34Z'), (b'retry-after', b'88'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:52:34Z'), (b'request-id', b'req_01Kg9MqaGfgWc68cxsGqYoHS'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'92989154fa781b30-GRU')])
2025-04-01 10:52:34,547 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:52:34,548 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:52:34,548 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:52:34,548 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:52:34,548 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:52:34,548 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:52:34 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:52:34Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:03Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:52:34Z', 'retry-after': '88', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:52:34Z', 'request-id': 'req_01Kg9MqaGfgWc68cxsGqYoHS', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '92989154fa781b30-GRU'})
2025-04-01 10:52:34,548 - anthropic._base_client - DEBUG - request_id: req_01Kg9MqaGfgWc68cxsGqYoHS
2025-04-01 10:52:34,548 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:52:34,550 - anthropic._base_client - DEBUG - Re-raising status error
2025-04-01 10:52:34,550 - ra_aid.ra_aid.agent_utils - INFO - API error (attempt 6/20): Error code: 429 - {'type': 'error', 'error': {'type': 'rate_limit_error', 'message': 'This request would exceed the rate limit for your organization (35cc1445-9940-4933-8d6e-6601fd32386d) of 40,000 input tokens per minute. For details, refer to: https://docs.anthropic.com/en/api/rate-limits. You can see the response headers for current usage. Please reduce the prompt length or the maximum tokens requested, or try again later. You may also contact sales at https://www.anthropic.com/contact-sales to discuss your options for a rate limit increase.'}}
2025-04-01 10:52:34,551 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" ORDER BY "t1"."created_at" DESC LIMIT ?', [1])
2025-04-01 10:52:34,555 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" WHERE ("t1"."id" = ?) LIMIT ? OFFSET ?', [1, 1, 0])
2025-04-01 10:52:34,555 - peewee - DEBUG - ('INSERT INTO "trajectory" ("created_at", "updated_at", "human_input_id", "tool_name", "tool_parameters", "tool_result", "step_data", "record_type", "current_cost", "input_tokens", "output_tokens", "is_error", "error_message", "error_type", "error_details", "session_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [datetime.datetime(2025, 4, 1, 10, 52, 34, 555612), datetime.datetime(2025, 4, 1, 10, 52, 34, 555635), 1, '', None, None, '{"error_message": "Encountered RateLimitError: Error code: 429 - {\'type\': \'error\', \'error\': {\'type\': \'rate_limit_error\', \'message\': \'This request would exceed the rate limit for your organization (35cc1445-9940-4933-8d6e-6601fd32386d) of 40,000 input tokens per minute. For details, refer to: https://docs.anthropic.com/en/api/rate-limits. You can see the response headers for current usage. Please reduce the prompt length or the maximum tokens requested, or try again later. You may also contact sales at https://www.anthropic.com/contact-sales to discuss your options for a rate limit increase.\'}}. Retrying in 32s... (Attempt 6/20)", "display_title": "Rate Limit Hit"}', 'error', None, None, None, True, "Encountered RateLimitError: Error code: 429 - {'type': 'error', 'error': {'type': 'rate_limit_error', 'message': 'This request would exceed the rate limit for your organization (35cc1445-9940-4933-8d6e-6601fd32386d) of 40,000 input tokens per minute. For details, refer to: https://docs.anthropic.com/en/api/rate-limits. You can see the response headers for current usage. Please reduce the prompt length or the maximum tokens requested, or try again later. You may also contact sales at https://www.anthropic.com/contact-sales to discuss your options for a rate limit increase.'}}. Retrying in 32s... (Attempt 6/20)", None, None, 3])
2025-04-01 10:52:34,556 - ra_aid.ra_aid.database.repositories.trajectory_repository - DEBUG - Created trajectory record ID 24 of type: error
2025-04-01 10:52:34,557 - markdown_it.rules_block.code - DEBUG - entering code: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.fence - DEBUG - entering fence: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.blockquote - DEBUG - entering blockquote: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.hr - DEBUG - entering hr: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.list - DEBUG - entering list: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.reference - DEBUG - entering reference: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.html_block - DEBUG - entering html_block: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.heading - DEBUG - entering heading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.lheading - DEBUG - entering lheading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:52:34,557 - markdown_it.rules_block.paragraph - DEBUG - entering paragraph: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:06,656 - ra_aid.ra_aid.agent_utils - DEBUG - Attempt 7/20
2025-04-01 10:53:06,657 - ra_aid.ra_aid.agent_utils - DEBUG - Cost tracking is disabled, skipping callback handler
2025-04-01 10:53:06,658 - ra_aid.ra_aid.agent_utils - DEBUG - Using stream_config for agent.stream(): {'recursion_limit': 100, 'max_test_cmd_retries': 3, 'max_tool_failures': 3, 'fallback_tool_model_limit': 5, 'retry_fallback_count': 3, 'test_cmd_timeout': 300, 'show_cost': False, 'track_cost': False, 'valid_providers': ['anthropic', 'openai', 'openrouter', 'openai-compatible', 'deepseek', 'gemini', 'ollama', 'fireworks', 'groq'], 'provider': 'anthropic', 'model': 'claude-3-7-sonnet-20250219', 'num_ctx': 262144, 'expert_provider': 'anthropic', 'expert_model': 'claude-3-7-sonnet-20250219', 'expert_num_ctx': 262144, 'temperature': 1.0, 'experimental_fallback_handler': False, 'web_research_enabled': False, 'show_thoughts': False, 'force_reasoning_assistance': False, 'disable_reasoning_assistance': False, 'custom_tools': None, 'custom_tools_enabled': False, 'configurable': {'thread_id': '850f0dd3-2610-4580-a034-1d7cf96a196c'}, 'research_only': False, 'cowboy_mode': False, 'aider_config': None, 'use_aider': True, 'limit_tokens': True, 'auto_test': False, 'test_cmd': None, 'planner_provider': 'anthropic', 'planner_model': 'claude-3-7-sonnet-20250219', 'research_provider': 'anthropic', 'research_model': 'claude-3-7-sonnet-20250219'}
2025-04-01 10:53:06,676 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:53:06,678 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:53:06,679 - httpcore.connection - DEBUG - close.started
2025-04-01 10:53:06,679 - httpcore.connection - DEBUG - close.complete
2025-04-01 10:53:06,679 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=180.0 socket_options=[(65535, 8, True), (6, 257, 60), (6, 258, 5)]
2025-04-01 10:53:06,713 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc6a600>
2025-04-01 10:53:06,713 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x11c905ed0> server_hostname='api.anthropic.com' timeout=180.0
2025-04-01 10:53:06,748 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc69880>
2025-04-01 10:53:06,749 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:53:06,749 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:53:06,749 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:53:06,749 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:53:06,749 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:53:17,258 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 01 Apr 2025 13:53:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'999'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:53:06Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:22Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:53:17Z'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:53:17Z'), (b'request-id', b'req_01VSHgpgoNNCyoAXxxFFL4VM'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9298922168c4535f-GRU'), (b'Content-Encoding', b'gzip')])
2025-04-01 10:53:17,259 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-04-01 10:53:17,259 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:53:17,259 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:53:17,259 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:53:17,259 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:53:17,260 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Tue, 01 Apr 2025 13:53:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '999', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:53:06Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:22Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:53:17Z', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:53:17Z', 'request-id': 'req_01VSHgpgoNNCyoAXxxFFL4VM', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '9298922168c4535f-GRU', 'content-encoding': 'gzip'})
2025-04-01 10:53:17,260 - anthropic._base_client - DEBUG - request_id: req_01VSHgpgoNNCyoAXxxFFL4VM
2025-04-01 10:53:17,264 - ra_aid.ra_aid.agent_utils - DEBUG - Agent output: {'agent': {'messages': [AIMessage(content=[{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'name': 'read_file_tool', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01QsiJ9K8LJWX8nTmHeGKnQa', 'model': 'claude-3-7-sonnet-20250219', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12674, 'output_tokens': 225}, 'model_name': 'claude-3-7-sonnet-20250219'}, name='claude-3-7-sonnet-20250219', id='run-29c3c343-26ff-491a-a16c-811f3e8970f5-0', tool_calls=[{'name': 'read_file_tool', 'args': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'type': 'tool_call'}], usage_metadata={'input_tokens': 12674, 'output_tokens': 225, 'total_tokens': 12899, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}
2025-04-01 10:53:17,265 - markdown_it.rules_block.code - DEBUG - entering code: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.fence - DEBUG - entering fence: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.blockquote - DEBUG - entering blockquote: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.hr - DEBUG - entering hr: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.list - DEBUG - entering list: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.reference - DEBUG - entering reference: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.html_block - DEBUG - entering html_block: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.heading - DEBUG - entering heading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.lheading - DEBUG - entering lheading: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,265 - markdown_it.rules_block.paragraph - DEBUG - entering paragraph: StateBlock(line=0,level=0,tokens=0), 0, 1, False
2025-04-01 10:53:17,268 - root - DEBUG - Starting to read file: src/components/PrevCalculator/index.tsx
2025-04-01 10:53:17,270 - root - DEBUG - Read chunk: 8192 bytes, running total: 8192 bytes
2025-04-01 10:53:17,270 - root - DEBUG - Read chunk: 8192 bytes, running total: 16384 bytes
2025-04-01 10:53:17,270 - root - DEBUG - Read chunk: 8192 bytes, running total: 24576 bytes
2025-04-01 10:53:17,271 - root - DEBUG - Read chunk: 8192 bytes, running total: 32768 bytes
2025-04-01 10:53:17,271 - root - DEBUG - Read chunk: 8192 bytes, running total: 40960 bytes
2025-04-01 10:53:17,271 - root - DEBUG - Read chunk: 8192 bytes, running total: 49152 bytes
2025-04-01 10:53:17,271 - root - DEBUG - Read chunk: 8192 bytes, running total: 57344 bytes
2025-04-01 10:53:17,271 - root - DEBUG - Read chunk: 8192 bytes, running total: 65536 bytes
2025-04-01 10:53:17,271 - root - DEBUG - Read chunk: 8192 bytes, running total: 73728 bytes
2025-04-01 10:53:17,271 - root - DEBUG - Read chunk: 5952 bytes, running total: 79680 bytes
2025-04-01 10:53:17,271 - root - DEBUG - File read complete: 79680 bytes in 0.00s
2025-04-01 10:53:17,271 - root - DEBUG - Pre-truncation stats: 79680 bytes, 1860 lines
2025-04-01 10:53:17,272 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" ORDER BY "t1"."created_at" DESC LIMIT ?', [1])
2025-04-01 10:53:17,275 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" WHERE ("t1"."id" = ?) LIMIT ? OFFSET ?', [1, 1, 0])
2025-04-01 10:53:17,275 - peewee - DEBUG - ('INSERT INTO "trajectory" ("created_at", "updated_at", "human_input_id", "tool_name", "tool_parameters", "tool_result", "step_data", "record_type", "current_cost", "input_tokens", "output_tokens", "is_error", "error_message", "error_type", "error_details", "session_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [datetime.datetime(2025, 4, 1, 10, 53, 17, 275577), datetime.datetime(2025, 4, 1, 10, 53, 17, 275596), 1, 'read_file_tool', '{"filepath": "src/components/PrevCalculator/index.tsx", "encoding": "utf-8"}', None, '{"filepath": "src/components/PrevCalculator/index.tsx", "display_title": "File Read", "line_count": 1860, "total_bytes": 79680, "elapsed_time": 0.0030426979064941406}', 'tool_execution', None, None, None, False, None, None, None, 3])
2025-04-01 10:53:17,276 - ra_aid.ra_aid.database.repositories.trajectory_repository - DEBUG - Created trajectory record ID 25 for tool: read_file_tool
2025-04-01 10:53:17,280 - ra_aid.ra_aid.agent_utils - DEBUG - Agent output: {'tools': {'messages': [ToolMessage(content='{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', name='read_file_tool', id='e6ad9654-c3d2-4f41-a287-194383aa5c34', tool_call_id='toolu_018xZ96p8SCTyhUiyR3aCeVU')]}}
2025-04-01 10:53:17,282 - ra_aid.ra_aid.agent_utils - DEBUG - Agent output: {'__interrupt__': ()}
2025-04-01 10:53:17,282 - ra_aid.ra_aid.agent_utils - DEBUG - Stream iteration ended; checking agent state for continuation.
2025-04-01 10:53:17,283 - ra_aid.ra_aid.agent_utils - DEBUG - Agent state retrieved: StateSnapshot(values={'messages': [HumanMessage(content='Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n', additional_kwargs={}, response_metadata={}, id='a9a339f4-ea03-4cfd-b14b-4212700bdd2d'), AIMessage(content=[{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'name': 'read_file_tool', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01QsiJ9K8LJWX8nTmHeGKnQa', 'model': 'claude-3-7-sonnet-20250219', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12674, 'output_tokens': 225}, 'model_name': 'claude-3-7-sonnet-20250219'}, name='claude-3-7-sonnet-20250219', id='run-29c3c343-26ff-491a-a16c-811f3e8970f5-0', tool_calls=[{'name': 'read_file_tool', 'args': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'type': 'tool_call'}], usage_metadata={'input_tokens': 12674, 'output_tokens': 225, 'total_tokens': 12899, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}}), ToolMessage(content='{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', name='read_file_tool', id='e6ad9654-c3d2-4f41-a287-194383aa5c34', tool_call_id='toolu_018xZ96p8SCTyhUiyR3aCeVU')]}, next=('agent',), config={'configurable': {'thread_id': '850f0dd3-2610-4580-a034-1d7cf96a196c', 'checkpoint_ns': '', 'checkpoint_id': '1f00f00a-9dde-6cb2-8002-84a914043ec7'}}, metadata={'source': 'loop', 'writes': {'tools': {'messages': [ToolMessage(content='{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', name='read_file_tool', id='e6ad9654-c3d2-4f41-a287-194383aa5c34', tool_call_id='toolu_018xZ96p8SCTyhUiyR3aCeVU')]}}, 'thread_id': '850f0dd3-2610-4580-a034-1d7cf96a196c', 'max_test_cmd_retries': 3, 'max_tool_failures': 3, 'fallback_tool_model_limit': 5, 'retry_fallback_count': 3, 'test_cmd_timeout': 300, 'show_cost': False, 'track_cost': False, 'provider': 'anthropic', 'model': 'claude-3-7-sonnet-20250219', 'num_ctx': 262144, 'expert_provider': 'anthropic', 'expert_model': 'claude-3-7-sonnet-20250219', 'expert_num_ctx': 262144, 'temperature': 1.0, 'experimental_fallback_handler': False, 'web_research_enabled': False, 'show_thoughts': False, 'force_reasoning_assistance': False, 'disable_reasoning_assistance': False, 'custom_tools_enabled': False, 'research_only': False, 'cowboy_mode': False, 'use_aider': True, 'limit_tokens': True, 'auto_test': False, 'planner_provider': 'anthropic', 'planner_model': 'claude-3-7-sonnet-20250219', 'research_provider': 'anthropic', 'research_model': 'claude-3-7-sonnet-20250219', 'step': 2, 'parents': {}}, created_at='2025-04-01T13:53:17.279538+00:00', parent_config={'configurable': {'thread_id': '850f0dd3-2610-4580-a034-1d7cf96a196c', 'checkpoint_ns': '', 'checkpoint_id': '1f00f00a-9db6-6bf4-8001-1f1f215b5649'}}, tasks=(PregelTask(id='e4ae35b8-796e-7779-f205-b6faa9f01870', name='agent', path=('__pregel_pull', 'agent'), error=None, interrupts=(), state=None, result=None),))
2025-04-01 10:53:17,287 - ra_aid.ra_aid.agent_utils - DEBUG - Continuing execution with state.next: ('agent',)
2025-04-01 10:53:17,313 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:53:17,316 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:53:17,316 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:53:17,316 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:53:17,316 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:53:17,316 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:53:17,316 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:53:17,643 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:53:17 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:53:17Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:54:22Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:53:17Z'), (b'retry-after', b'52'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:53:17Z'), (b'request-id', b'req_01DshA4F4hLmiMQqSXEUqtVS'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929892637d3f535f-GRU')])
2025-04-01 10:53:17,644 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:53:17,644 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:53:17,644 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:53:17,644 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:53:17,644 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:53:17,644 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:53:17 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:53:17Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:54:22Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:53:17Z', 'retry-after': '52', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:53:17Z', 'request-id': 'req_01DshA4F4hLmiMQqSXEUqtVS', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929892637d3f535f-GRU'})
2025-04-01 10:53:17,645 - anthropic._base_client - DEBUG - request_id: req_01DshA4F4hLmiMQqSXEUqtVS
2025-04-01 10:53:17,645 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:53:17,645 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:53:17,645 - anthropic._base_client - DEBUG - 5 retries left
2025-04-01 10:53:17,646 - anthropic._base_client - INFO - Retrying request to /v1/messages in 52.000000 seconds
2025-04-01 10:54:09,651 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:54:09,656 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:54:09,657 - httpcore.connection - DEBUG - close.started
2025-04-01 10:54:09,657 - httpcore.connection - DEBUG - close.complete
2025-04-01 10:54:09,657 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=180.0 socket_options=[(65535, 8, True), (6, 257, 60), (6, 258, 5)]
2025-04-01 10:54:09,686 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc6be30>
2025-04-01 10:54:09,686 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x11c905ed0> server_hostname='api.anthropic.com' timeout=180.0
2025-04-01 10:54:09,727 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11cc6b770>
2025-04-01 10:54:09,727 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:54:09,727 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:54:09,727 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:54:09,728 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:54:09,728 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:54:15,861 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 01 Apr 2025 13:54:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'999'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:54:10Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:55:22Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:54:15Z'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:54:15Z'), (b'request-id', b'req_011reeihRyhxxEMiGMexVUVg'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929893ab0af9623c-GRU'), (b'Content-Encoding', b'gzip')])
2025-04-01 10:54:15,861 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-04-01 10:54:15,861 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:54:15,861 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:54:15,861 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:54:15,861 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:54:15,861 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Tue, 01 Apr 2025 13:54:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '999', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:54:10Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:55:22Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:54:15Z', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:54:15Z', 'request-id': 'req_011reeihRyhxxEMiGMexVUVg', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929893ab0af9623c-GRU', 'content-encoding': 'gzip'})
2025-04-01 10:54:15,862 - anthropic._base_client - DEBUG - request_id: req_011reeihRyhxxEMiGMexVUVg
2025-04-01 10:54:15,864 - root - DEBUG - Starting to read file: src/components/PrevCalculator/ResultadosAposentadoria.tsx
2025-04-01 10:54:15,865 - root - DEBUG - Read chunk: 8192 bytes, running total: 8192 bytes
2025-04-01 10:54:15,865 - root - DEBUG - Read chunk: 8192 bytes, running total: 16384 bytes
2025-04-01 10:54:15,865 - root - DEBUG - Read chunk: 8192 bytes, running total: 24576 bytes
2025-04-01 10:54:15,866 - root - DEBUG - Read chunk: 8192 bytes, running total: 32768 bytes
2025-04-01 10:54:15,866 - root - DEBUG - Read chunk: 5427 bytes, running total: 38195 bytes
2025-04-01 10:54:15,866 - root - DEBUG - File read complete: 38195 bytes in 0.00s
2025-04-01 10:54:15,866 - root - DEBUG - Pre-truncation stats: 38195 bytes, 886 lines
2025-04-01 10:54:15,866 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" ORDER BY "t1"."created_at" DESC LIMIT ?', [1])
2025-04-01 10:54:15,867 - peewee - DEBUG - ('SELECT "t1"."id", "t1"."created_at", "t1"."updated_at", "t1"."content", "t1"."source", "t1"."session_id" FROM "human_input" AS "t1" WHERE ("t1"."id" = ?) LIMIT ? OFFSET ?', [1, 1, 0])
2025-04-01 10:54:15,867 - peewee - DEBUG - ('INSERT INTO "trajectory" ("created_at", "updated_at", "human_input_id", "tool_name", "tool_parameters", "tool_result", "step_data", "record_type", "current_cost", "input_tokens", "output_tokens", "is_error", "error_message", "error_type", "error_details", "session_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [datetime.datetime(2025, 4, 1, 10, 54, 15, 867487), datetime.datetime(2025, 4, 1, 10, 54, 15, 867500), 1, 'read_file_tool', '{"filepath": "src/components/PrevCalculator/ResultadosAposentadoria.tsx", "encoding": "utf-8"}', None, '{"filepath": "src/components/PrevCalculator/ResultadosAposentadoria.tsx", "display_title": "File Read", "line_count": 886, "total_bytes": 38195, "elapsed_time": 0.0022568702697753906}', 'tool_execution', None, None, None, False, None, None, None, 3])
2025-04-01 10:54:15,867 - ra_aid.ra_aid.database.repositories.trajectory_repository - DEBUG - Created trajectory record ID 26 for tool: read_file_tool
2025-04-01 10:54:15,869 - ra_aid.ra_aid.agent_utils - DEBUG - Using stream_config for agent.stream(): {'recursion_limit': 100, 'max_test_cmd_retries': 3, 'max_tool_failures': 3, 'fallback_tool_model_limit': 5, 'retry_fallback_count': 3, 'test_cmd_timeout': 300, 'show_cost': False, 'track_cost': False, 'valid_providers': ['anthropic', 'openai', 'openrouter', 'openai-compatible', 'deepseek', 'gemini', 'ollama', 'fireworks', 'groq'], 'provider': 'anthropic', 'model': 'claude-3-7-sonnet-20250219', 'num_ctx': 262144, 'expert_provider': 'anthropic', 'expert_model': 'claude-3-7-sonnet-20250219', 'expert_num_ctx': 262144, 'temperature': 1.0, 'experimental_fallback_handler': False, 'web_research_enabled': False, 'show_thoughts': False, 'force_reasoning_assistance': False, 'disable_reasoning_assistance': False, 'custom_tools': None, 'custom_tools_enabled': False, 'configurable': {'thread_id': '850f0dd3-2610-4580-a034-1d7cf96a196c'}, 'research_only': False, 'cowboy_mode': False, 'aider_config': None, 'use_aider': True, 'limit_tokens': True, 'auto_test': False, 'test_cmd': None, 'planner_provider': 'anthropic', 'planner_model': 'claude-3-7-sonnet-20250219', 'research_provider': 'anthropic', 'research_model': 'claude-3-7-sonnet-20250219'}
2025-04-01 10:54:15,902 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': 'Let me examine the related files to understand how the PrevCalculator component is used:', 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:54:15,905 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:54:15,905 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:54:15,906 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:54:15,906 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:54:15,906 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:54:15,906 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:54:16,187 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:54:16 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:54:16Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:55:22Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:54:16Z'), (b'retry-after', b'65'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:54:16Z'), (b'request-id', b'req_01UNYKUmnobWTRkSLtZL7jm2'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929893d19c4b623c-GRU')])
2025-04-01 10:54:16,188 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:54:16,188 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:54:16,189 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:54:16,189 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:54:16,189 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:54:16,189 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:54:16 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:54:16Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:55:22Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:54:16Z', 'retry-after': '65', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:54:16Z', 'request-id': 'req_01UNYKUmnobWTRkSLtZL7jm2', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929893d19c4b623c-GRU'})
2025-04-01 10:54:16,190 - anthropic._base_client - DEBUG - request_id: req_01UNYKUmnobWTRkSLtZL7jm2
2025-04-01 10:54:16,190 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:54:16,191 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:54:16,191 - anthropic._base_client - DEBUG - 5 retries left
2025-04-01 10:54:16,191 - anthropic._base_client - INFO - Retrying request to /v1/messages in 0.402776 seconds
2025-04-01 10:54:16,599 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': 'Let me examine the related files to understand how the PrevCalculator component is used:', 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:54:16,606 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:54:16,606 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:54:16,607 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:54:16,607 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:54:16,608 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:54:16,608 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:54:16,894 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:54:16 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:54:16Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:55:22Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:54:16Z'), (b'retry-after', b'65'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:54:16Z'), (b'request-id', b'req_01TBdHL8TB3R2QrWnzidnvoa'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929893d609a8623c-GRU')])
2025-04-01 10:54:16,895 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:54:16,895 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:54:16,895 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:54:16,895 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:54:16,896 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:54:16,896 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:54:16 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:54:16Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:55:22Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:54:16Z', 'retry-after': '65', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:54:16Z', 'request-id': 'req_01TBdHL8TB3R2QrWnzidnvoa', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929893d609a8623c-GRU'})
2025-04-01 10:54:16,896 - anthropic._base_client - DEBUG - request_id: req_01TBdHL8TB3R2QrWnzidnvoa
2025-04-01 10:54:16,896 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:54:16,897 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:54:16,897 - anthropic._base_client - DEBUG - 4 retries left
2025-04-01 10:54:16,897 - anthropic._base_client - INFO - Retrying request to /v1/messages in 0.902425 seconds
2025-04-01 10:54:17,806 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': 'Let me examine the related files to understand how the PrevCalculator component is used:', 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:54:17,815 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:54:17,815 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:54:17,815 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:54:17,816 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:54:17,816 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:54:17,816 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:54:18,101 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:54:18 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:54:18Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:55:22Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:54:18Z'), (b'retry-after', b'63'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:54:18Z'), (b'request-id', b'req_0149x3XFh2vx4Fmgc1EDPSeH'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929893dd89e3623c-GRU')])
2025-04-01 10:54:18,102 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:54:18,103 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:54:18,103 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:54:18,103 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:54:18,103 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:54:18,104 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:54:18 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:54:18Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:55:22Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:54:18Z', 'retry-after': '63', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:54:18Z', 'request-id': 'req_0149x3XFh2vx4Fmgc1EDPSeH', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929893dd89e3623c-GRU'})
2025-04-01 10:54:18,104 - anthropic._base_client - DEBUG - request_id: req_0149x3XFh2vx4Fmgc1EDPSeH
2025-04-01 10:54:18,104 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:54:18,105 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:54:18,105 - anthropic._base_client - DEBUG - 3 retries left
2025-04-01 10:54:18,105 - anthropic._base_client - INFO - Retrying request to /v1/messages in 1.716421 seconds
2025-04-01 10:54:19,825 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': 'Let me examine the related files to understand how the PrevCalculator component is used:', 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:54:19,833 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:54:19,833 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:54:19,834 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:54:19,834 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:54:19,970 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:54:19,970 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:54:20,298 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 429, b'Too Many Requests', [(b'Date', b'Tue, 01 Apr 2025 13:54:20 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'529'), (b'Connection', b'keep-alive'), (b'x-should-retry', b'true'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'1000'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:54:20Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:55:22Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:54:20Z'), (b'retry-after', b'61'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:54:20Z'), (b'request-id', b'req_01EncMwE3UkWgZJEMQc15bYQ'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'929893ea2933623c-GRU')])
2025-04-01 10:54:20,299 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 429 Too Many Requests"
2025-04-01 10:54:20,299 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:54:20,299 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:54:20,299 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:54:20,299 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:54:20,299 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "429 Too Many Requests" Headers({'date': 'Tue, 01 Apr 2025 13:54:20 GMT', 'content-type': 'application/json', 'content-length': '529', 'connection': 'keep-alive', 'x-should-retry': 'true', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '1000', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:54:20Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:55:22Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:54:20Z', 'retry-after': '61', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:54:20Z', 'request-id': 'req_01EncMwE3UkWgZJEMQc15bYQ', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '929893ea2933623c-GRU'})
2025-04-01 10:54:20,299 - anthropic._base_client - DEBUG - request_id: req_01EncMwE3UkWgZJEMQc15bYQ
2025-04-01 10:54:20,299 - anthropic._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/anthropic/_base_client.py", line 1096, in _request
    response.raise_for_status()
  File "/opt/homebrew/Cellar/ra-aid/0.21.0/libexec/lib/python3.12/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '429 Too Many Requests' for url 'https://api.anthropic.com/v1/messages'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
2025-04-01 10:54:20,300 - anthropic._base_client - DEBUG - Retrying as header `x-should-retry` is set to `true`
2025-04-01 10:54:20,300 - anthropic._base_client - DEBUG - 2 retries left
2025-04-01 10:54:20,300 - anthropic._base_client - INFO - Retrying request to /v1/messages in 3.322227 seconds
2025-04-01 10:54:23,628 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'json_data': {'max_tokens': 64000, 'messages': [{'role': 'user', 'content': 'Current Date: 2025-04-01 10:41:58\n\n<previous research>\n<key facts>\n\n</key facts>\n\n<relevant code snippets>\n\n</relevant code snippets>\n\n<related files>\n[]\n</related files>\n\nWork already done:\n\n<work log>\nNo work log entries\n</work log>\n\n<project info>\nProject Status: Existing Project\nTotal Files: 187\nFiles:\n- 1s\n- README.md\n- contentlayer.config.js\n- next.config.mjs\n- package.json\n- postcss.config.js\n- public/advogado_civel.svg\n- public/advogado_fundo.png\n- public/advogado_previdenciario.svg\n- public/advogado_tributario.svg\n- public/amalia-barros.jpg\n- public/aposentadoria-caixa.jpg\n- public/aposentadoria-coveiro.jpg\n- public/aposentadoria-enfermeira.jpg\n- public/aposentadoria-frentista.jpg\n- public/aposentadoria-motorista.jpg\n- public/aposentadoria-vigilante.jpg\n- public/aposentadoria.jpg\n- public/arrow.svg\n- public/arrow_right.svg\n- public/bruno_pellizzetti.png\n- public/coveiro.jpg\n- public/eduardo_walber.png\n- public/email.svg\n- public/enfermeira.jpg\n- public/favicon.ico\n- public/fundo_1.png\n- public/fundo_2.png\n- public/icon_email.svg\n- public/icon_insta.svg\n- public/icon_wpp.svg\n- public/instagram.svg\n- public/joao_prado.png\n- public/josh_styles.png\n- public/linkedin.svg\n- public/logoBranca.svg\n- public/logoCompleta.svg\n- public/logoCompletaBranca.svg\n- public/mockup.png\n- public/monocular.jpg\n- public/motorista.jpg\n- public/next.svg\n- public/quem_somos.png\n- public/robots.txt\n- public/rural-aposentadoria.jpg\n- public/rural.jpg\n- public/sitemap.xml\n- public/vercel.svg\n- public/vigilante.jpg\n- public/wade_warren.png\n- response.bin\n- src/app/GoogleFonts.tsx\n- src/app/GoogleScripts.tsx\n- src/app/advogado-previdenciario-cascavel/page.tsx\n- src/app/advogado/[slug]/layout.tsx\n- src/app/advogado/[slug]/page.tsx\n- src/app/api/send-ebook/route.ts\n- src/app/aposentadoria-coveiro/layout.tsx\n- src/app/aposentadoria-coveiro/page.tsx\n- src/app/aposentadoria-enfermeiro/layout.tsx\n- src/app/aposentadoria-enfermeiro/page.tsx\n- src/app/aposentadoria-frentista-caixa/layout.tsx\n- src/app/aposentadoria-frentista-caixa/page.tsx\n- src/app/aposentadoria-motorista/layout.tsx\n- src/app/aposentadoria-motorista/page.tsx\n- src/app/aposentadoria-rural/layout.tsx\n- src/app/aposentadoria-rural/page.tsx\n- src/app/aposentadoria-vigilante/layout.tsx\n- src/app/aposentadoria-vigilante/page.tsx\n- src/app/aposentadoria-visao-monocular/layout.tsx\n- src/app/aposentadoria-visao-monocular/page.tsx\n- src/app/blog/[slug]/page.tsx\n- src/app/blog/debug/page.tsx\n- src/app/blog/layout.tsx\n- src/app/blog/page.tsx\n- src/app/dashAvalations/layout.tsx\n- src/app/dashFaqs/layout.tsx\n- src/app/dashService/layout.tsx\n- src/app/dashboard/layout.tsx\n- src/app/dashboard/page.tsx\n- src/app/ebook/page.tsx\n- src/app/globals.css\n- src/app/layout.tsx\n- src/app/page.tsx\n- src/components/AllPosts/index.tsx\n- src/components/BlockHeader/index.tsx\n- src/components/BlogCard/index.tsx\n- src/components/BlogHeader/index.tsx\n- src/components/CalcHeader/index.jsx\n- src/components/DriverRetirement/index.tsx\n- src/components/FifthSection/index.tsx\n- src/components/FirstSection/index.tsx\n- src/components/Footer/index.tsx\n- src/components/FourthSection/index.tsx\n- src/components/GasRetirement/index.tsx\n- src/components/GravediggerRetirement/index.tsx\n- src/components/GuardRetirement/index.tsx\n- src/components/Header/index.tsx\n- src/components/HeaderDashboard/index.tsx\n- src/components/Hero/index.tsx\n- src/components/Lawyers/index.tsx\n- src/components/MonocularRetirement/index.tsx\n- src/components/MyBlog/index.tsx\n- src/components/NurseRetirement/index.tsx\n- src/components/Post/index.tsx\n- src/components/PrevCalculator/DataVisualizer.tsx\n- src/components/PrevCalculator/ResultadosAposentadoria.tsx\n- src/components/PrevCalculator/index.tsx\n- src/components/RuralRetirement/index.tsx\n- src/components/SecondSection/index.tsx\n- src/components/Sendmail/page.tsx\n- src/components/SeventhSection/index.tsx\n- src/components/SixthSection/index.tsx\n- src/components/ThirdSection/index.tsx\n- src/components/ui/FaqStylesImport.tsx\n- src/components/ui/button.tsx\n- src/components/ui/card.tsx\n- src/components/ui/faq-styles.css\n- src/components/ui/input.tsx\n- src/components/ui/use-toast.tsx\n- src/content/blog/2024-05-16-adv-confiavel.mdx\n- src/content/blog/2024-05-16-aposentadoria-bloq.mdx\n- src/content/blog/2024-05-16-avanco-pericia-medica-inss.mdx\n- src/content/blog/2024-05-16-noticias-portaria-38-2023.mdx\n- src/content/blog/2024-07-19-uniao-estavel.mdx\n- src/content/blog/2024-08-11-aposentadoria-rural.mdx\n- src/content/blog/2024-08-23-aposentadoria-deficiente-revisao.mdx\n- src/content/blog/2024-09-08-artigo-pensao-morte-conceitos-integralidade.mdx\n- src/content/blog/2024-10-10-pensao-extincao-cotas-individuais-nao-faca-seu-pedido-antes-de-ler.mdx\n- src/content/blog/2024-10-10-periodo-de-graca-guia.mdx\n- src/content/blog/2024-10-10-sucumbencia-previdenciaria-um-entendimento-injusto.mdx\n- src/content/blog/2025-01-09-CTC-periodo-trabalhado-prefeitura-como-autonomo.mdx\n- src/content/blog/2025-01-09-Tema-810-do-STF-Uma-Revisao-Ainda-Possivel.mdx\n- src/content/blog/2025-01-09-aposentadoria-do-motorista-uma-batalha-perdida.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-enfermagem.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-frentista.mdx\n- src/content/blog/2025-01-09-aposentadoria-especial-servidor-publico.mdx\n- src/content/blog/2025-01-09-aposentadoria-semina.mdx\n- src/content/blog/2025-01-09-aposentadoria-vigilange-na-mira-do-stf.mdx\n- src/content/blog/2025-01-09-aposentei-sem-tempo-rural-e-agora.mdx\n- src/content/blog/2025-01-09-como-pedir-ajuda-para-o-juiz.mdx\n- src/content/blog/2025-01-09-corrigir-erros-guia.mdx\n- src/content/blog/2025-01-09-ctc-averbacao-desaverbacao.mdx\n- src/content/blog/2025-01-09-ctc-o-que-fazer-com-tempo-trabalhado-no-regime-proprio.mdx\n- src/content/blog/2025-01-09-decisao-do-tce-pode-salvar-sua-aposentadoria.mdx\n- src/content/blog/2025-01-09-direito-adquirido-antes-reforma-previdencia.mdx\n- src/content/blog/2025-01-09-doencas-estigmatizantes.mdx\n- src/content/blog/2025-01-09-estrategia-do-duplo-requerimento-previdenciario.mdx\n- src/content/blog/2025-01-09-faq-advogado.mdx\n- src/content/blog/2025-01-09-faq-beneficio.mdx\n- src/content/blog/2025-01-09-faq-tutoriais.mdx\n- src/content/blog/2025-01-09-guia-completo-de-profissoes-que-nao-precisam-de-ppp.mdx\n- src/content/blog/2025-01-09-guia-completo-rural-segurado-especial.mdx\n- src/content/blog/2025-01-09-pagamento-em-atraso.mdx\n- src/content/blog/2025-01-09-pensao-por-morte-filho.mdx\n- src/content/blog/2025-01-09-pensao-por-morte.mdx\n- src/content/blog/2025-01-09-revisao-aposentadoria-pensao-servidor-publico-guia.mdx\n- src/content/blog/2025-01-09-rpps-licenca-e-contribuicao-em-atraso.mdx\n- src/content/blog/2025-01-09-teto-minimo-teto-maximo.mdx\n- src/content/blog/2025-01-09-triplice-acu.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-agentes-biologicos2.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-motoboy.mdx\n- src/content/blog/2025-02-21-aposentadoria-especial-novas-regras-2025.mdx\n- src/content/blog/2025-02-21-aposentadoria-rural-negada-solucoes.mdx\n- src/content/blog/2025-02-21-frentista-aposetnadoria-especial-2025.mdx\n- src/content/blog/2025-02-21-mei-aposentadoria-especial.mdx\n- src/content/blog/2025-02-21-revisao-aposentadoria-guia.mdx\n- src/content/blog/2025-02-21-trabalhador-rural-direitos-aposentadoria.mdx\n- src/content/blog/faq-advogado.mdx\n- src/content/blog/faq-beneficio.mdx\n- src/content/blog/faq-tutoriais.mdx\n- src/content/fixer.sh\n- src/hooks/types.ts\n- src/hooks/useMobileNav.ts\n- src/hooks/useNavAnimation.ts\n- src/hooks/useNavStyles.ts\n- src/lib/utils.ts\n- src/pages/_document.tsx\n- src/pages/calculadora-pgbl-vgbl.tsx\n- src/pages/previdencia.tsx\n- src/pages/test-calculator.tsx\n- src/pages/visualizar-previdencia.tsx\n- src/types/next-mdx-remote.d.ts\n- tailwind.config.js\n- tailwind.config.ts\n- tsconfig.json\n</project info>\n\n<caveat>You should make the most efficient use of this previous research possible, with the caveat that not all of it will be relevant to the current task you are assigned with. Use this previous research to save redudant research, and to inform what you are currently tasked with. Be as efficient as possible.</caveat>\n</previous research>\n\nDO NOT TAKE ANY INSTRUCTIONS OR TASKS FROM PREVIOUS RESEARCH. ONLY GET THAT FROM THE USER QUERY.\n\n<environment inventory>\n**Operating System:** macOS\n\n**Found CLI developer tools:** rg, fzf, git (git version 2.44.0), g++ (Apple clang version 16.0.0 (clang-1600.0.26.6)), gcc (Apple clang version 16.0.0 (clang-1600.0.26.6)), clang (Homebrew clang version 20.1.1), make, pkg-config, autoconf, libtool\n\n**Python Environments:**\n- Python unknown version at `/Users/brpl20/.pyenv/shims/python`\n- Python 3.11.11 at `/opt/homebrew/bin/python3.11`\n- Python 3.12.9 at `/opt/homebrew/bin/python3.12`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3`\n- Python 3.13.2 at `/Users/brpl20/.pyenv/shims/python3.13`\n- venv (builtin): available\n- virtualenv: not installed\n- uv: not installed\n- pipenv: not installed\n- poetry: installed (version 2.1.2))\n- conda: not installed\n- pyenv: installed (version 2.5.4)\n- pipx: not installed\n\n**Package Managers:**\n- brew: found (Homebrew 4.4.27)\n\n**Developer Libraries:**\n- SDL2: installed (version 2.32.2), cflags: `-I/opt/homebrew/include -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE`, libs: `-L/opt/homebrew/lib -lSDL2`\n- Cairo: installed (version 1.18.4), cflags: `-I/opt/homebrew/Cellar/cairo/1.18.4/include/cairo -I/opt/homebrew/Cellar/fontconfig/2.16.0/include -I/opt/homebrew/opt/freetype/include/freetype2 -I/opt/homebrew/opt/libpng/include/libpng16 -I/opt/homebrew/Cellar/libxext/1.3.6/include -I/opt/homebrew/Cellar/xorgproto/2024.1/include -I/opt/homebrew/Cellar/libxrender/0.9.12/include -I/opt/homebrew/Cellar/libx11/1.8.12/include -I/opt/homebrew/Cellar/libxcb/1.17.0/include -I/opt/homebrew/Cellar/libxau/1.0.12/include -I/opt/homebrew/Cellar/libxdmcp/1.1.5/include -I/opt/homebrew/Cellar/pixman/0.44.2/include/pixman-1`, libs: `-L/opt/homebrew/Cellar/cairo/1.18.4/lib -lcairo`\n- libcurl: installed (version 8.7.1), libs: `-lcurl`\n- ZeroMQ: installed (version 4.3.5), cflags: `-I/opt/homebrew/Cellar/zeromq/4.3.5_1/include -I/opt/homebrew/Cellar/libsodium/1.0.20/include`, libs: `-L/opt/homebrew/Cellar/zeromq/4.3.5_1/lib -lzmq`\n- libevent: installed (version 2.1.12-stable), cflags: `-I/opt/homebrew/Cellar/libevent/2.1.12_1/include`, libs: `-L/opt/homebrew/Cellar/libevent/2.1.12_1/lib -levent`\n- libuv: installed (version 1.50.0), cflags: `-I/opt/homebrew/Cellar/libuv/1.50.0/include`, libs: `-L/opt/homebrew/Cellar/libuv/1.50.0/lib -luv`\n- APR: installed (version 1.5.2), cflags: `-DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -I/usr/include/apr-1`, libs: `-lapr-1 -lpthread`\n- zlib: installed (version 1.2.12), libs: `-lz`\n- LZ4: installed, headers: /opt/homebrew/include/lz4.h\n- Zstd: installed, headers: /opt/homebrew/include/zstd.h\n- Brotli: installed, headers: /opt/homebrew/include/brotli/decode.h\n- bzip2: installed (version 1.0.8), libs: `-lbz2`\n- xz: installed (version 5.8.0), cflags: `-I/opt/homebrew/Cellar/xz/5.8.0/include`, libs: `-L/opt/homebrew/Cellar/xz/5.8.0/lib -llzma`\n- Snappy: installed, headers: /opt/homebrew/include/snappy.h\n- libpng: installed (version 1.6.47), cflags: `-I/opt/homebrew/opt/libpng/include/libpng16`, libs: `-L/opt/homebrew/opt/libpng/lib -lpng16`\n- libjpeg: installed (version 3.1.0), cflags: `-I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/opt/jpeg-turbo/lib -ljpeg`\n- libtiff: installed (version 4.7.0), cflags: `-I/opt/homebrew/Cellar/libtiff/4.7.0/include -I/opt/homebrew/opt/zstd/include -I/opt/homebrew/Cellar/xz/5.8.0/include -I/opt/homebrew/opt/jpeg-turbo/include`, libs: `-L/opt/homebrew/Cellar/libtiff/4.7.0/lib -ltiff`\n- libwebp: installed (version 1.5.0), cflags: `-I/opt/homebrew/opt/webp/include -I/opt/homebrew/opt/webp/include/webp`, libs: `-L/opt/homebrew/opt/webp/lib -lwebp`\n- FFmpeg: installed (version 61.19.101), cflags: `-I/opt/homebrew/Cellar/ffmpeg/7.1.1_1/include`, libs: `-L/opt/homebrew/Cellar/ffmpeg/7.1.1_1/lib -lavcodec`\n- libogg: installed, headers: /opt/homebrew/include/ogg/ogg.h\n- libvorbis: installed (version 1.3.7), cflags: `-I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/libvorbis/1.3.7/lib -lvorbis`\n- libFLAC: installed (version 1.5.0), cflags: `-I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libogg/1.3.5/include`, libs: `-L/opt/homebrew/Cellar/flac/1.5.0/lib -lFLAC`\n- SQLite: installed (version 3.43.2), libs: `-lsqlite3`\n- PostgreSQL: installed (version 17.2), cflags: `-I/opt/homebrew/opt/libpq/include -I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/opt/libpq/lib -lpq`\n- MySQL: installed (version 24), cflags: `-I/opt/homebrew/Cellar/mysql/9.2.0_3/include/mysql`, libs: `-L/opt/homebrew/Cellar/mysql/9.2.0_3/lib -lmysqlclient`\n- LevelDB: installed, headers: /opt/homebrew/include/leveldb/db.h\n- OpenSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- LibreSSL: installed (version 3.4.1), cflags: `-I/opt/homebrew/Cellar/openssl@3/3.4.1/include`, libs: `-L/opt/homebrew/Cellar/openssl@3/3.4.1/lib -lssl -lcrypto`\n- libsodium: installed, headers: /opt/homebrew/include/sodium.h\n- GnuTLS: installed (version 3.8.4), cflags: `-I/opt/homebrew/Cellar/gnutls/3.8.4/include -I/opt/homebrew/Cellar/nettle/3.10.1/include -I/opt/homebrew/Cellar/libtasn1/4.20.0/include -I/opt/homebrew/Cellar/libidn2/2.3.7/include -I/opt/homebrew/Cellar/p11-kit/0.25.5/include/p11-kit-1`, libs: `-L/opt/homebrew/Cellar/gnutls/3.8.4/lib -lgnutls`\n- mbedTLS: installed (version 3.6.2), cflags: `-I/opt/homebrew/Cellar/mbedtls/3.6.2/include`, libs: `-L/opt/homebrew/Cellar/mbedtls/3.6.2/lib -lmbedtls`\n- LuaJIT: installed (version 2.1.1710088188), cflags: `-I/opt/homebrew/Cellar/luajit/2.1.1710088188/include/luajit-2.1`, libs: `-L/opt/homebrew/Cellar/luajit/2.1.1710088188/lib -lluajit-5.1`\n- libsndfile: installed (version 1.2.2), cflags: `-I/opt/homebrew/Cellar/libsndfile/1.2.2_1/include -I/opt/homebrew/Cellar/flac/1.5.0/include -I/opt/homebrew/Cellar/libvorbis/1.3.7/include -I/opt/homebrew/Cellar/libogg/1.3.5/include -I/opt/homebrew/Cellar/opus/1.5.2/include/opus -I/opt/homebrew/Cellar/mpg123/1.32.10/include`, libs: `-L/opt/homebrew/Cellar/libsndfile/1.2.2_1/lib -lsndfile`\n- ncurses: installed (version 6.0.20150808), cflags: `-D_DARWIN_C_SOURCE`, libs: `-lncurses`\n- GLib: installed (version 2.84.0), cflags: `-I/opt/homebrew/Cellar/glib/2.84.0_1/include/glib-2.0 -I/opt/homebrew/Cellar/glib/2.84.0_1/lib/glib-2.0/include -I/opt/homebrew/opt/gettext/include -I/opt/homebrew/Cellar/pcre2/10.45/include`, libs: `-L/opt/homebrew/Cellar/glib/2.84.0_1/lib -lglib-2.0 -L/opt/homebrew/opt/gettext/lib -lintl`\n- Not found: Allegro, Armadillo, Assimp, BLAS, BerkeleyDB, Blaze, Blitz++, Boost, BoostTest, Boost_Asio, Boost_Beast, Boost_uBLAS, BoringSSL, Botan, Box2D, Bullet, CMake, CUDA, Caffe, ChakraCore, Crypto++, DearImGui, DirectX, Duktape, Eigen, FMOD, GLFW, GLM, GSL, GStreamer, GTK, GoogleTest, Guile, HDF5, HIP, ICU, IntelMKL, Irrlicht, Jack, JavaScriptCore, JoltPhysics, LAPACK, LightGBM, Lua, MPI, MQTT, MXNet, Magnum, MicrosoftMPI, Mono, MuJoCo, NanoVG, Newton, ODE, OGRE, ONNX, OpenACC, OpenAL, OpenAL_Soft, OpenBLAS, OpenCL, OpenCV, OpenGL, OpenMP, OpenVINO, PhysX, Poco, PortAudio, PyTorch, Python_C_API, Qt, RapidJSON, Raylib, Redis, RocksDB, RtAudio, SDL_mixer, SFML, SoLoud, SpiderMonkey, TBB, Tcl, TensorFlow, TensorRT, Thrift, V8, Vulkan, XGBoost, YAML_cpp, bgfx, cuDNN, dlib, gRPC, glog, json-c, libwebsockets, log4cxx, nlohmann_json, nng, oneAPI, pkg-config, scikit-learn, spdlog, wolfSSL, wxWidgets, xtensor\n\n**Node.js and Related:**\n- Node.js: v20.11.1\n- npm: version 10.2.4\n- nvm: installed\n\n</environment inventory>\n\nMAKE USE OF THE ENVIRONMENT INVENTORY TO GET YOUR WORK DONE AS EFFICIENTLY AND ACCURATELY AS POSSIBLE\n\nE.G. IF WE ARE USING A LIBRARY AND IT IS FOUND IN ENV INVENTORY, ADD THE INCLUDE/LINKER FLAGS TO YOUR MAKEFILE/CMAKELISTS/COMPILATION COMMAND/\nETC.\n\nYOU MUST **EXPLICITLY** INCLUDE ANY PATHS FROM THE ABOVE INFO IF NEEDED. IT IS NOT AUTOMATIC.\n\nREAD AND STUDY ACTUAL LIBRARY HEADERS/CODE FROM THE ENVIRONMENT, IF AVAILABLE AND RELEVANT.\n\nRole:\n\nYou are an autonomous research agent focused solely on enumerating and describing the current codebase and its related files. You are not a planner, not an implementer, and not a chatbot for general problem solving. You will not propose solutions, improvements, or modifications.\n\nStrict Focus on Existing Artifacts\n\nYou must:\n\n    Identify directories and files currently in the codebase.\n    Describe what exists in these files (file names, directory structures, documentation found, code patterns, dependencies).\n    Do so by incrementally and systematically exploring the filesystem with careful directory listing tool calls.\n    You can use fuzzy file search to quickly find relevant files matching a search pattern.\n    Use ripgrep_search extensively to do *exhaustive* searches for all references to anything that might be changed as part of the base level task.\n    Call emit_key_facts and emit_key_snippet on key information/facts/snippets of code you discover about this project during your research. This is information you will be writing down to be able to efficiently complete work in the future, so be on the lookout for these and make it count.\n    While it is important to emit key facts and snippets, only emit ones that are truly important info about the project or this task. Do not excessively emit key facts or snippets. Be strategic about it.\n\nYou must not:\n\n    Explain why the code or files exist.\n    Discuss the project\'s purpose or the problem it may solve.\n    Suggest any future actions, improvements, or architectural changes.\n    Make assumptions or speculate about things not explicitly present in the files.\n\nTools and Methodology\n\n    Use only non-recursive, targeted fuzzy find, ripgrep_search tool (which provides context), list_directory_tree tool, shell commands, etc. (use your imagination) to efficiently explore the project structure.\n    After identifying files, you may read them to confirm their contents only if needed to understand what currently exists.\n    Be meticulous: If you find a directory, explore it thoroughly. If you find files of potential relevance, record them. Make sure you do not skip any directories you discover.\n    Prefer to use list_directory_tree and other tools over shell commands.\n    Do not use list_directory_tree if you already have the info in the project file list.\n      list_directory_tree is ideal for non-project files or project files when we\'re actively changing project structure.\n    Do not produce huge outputs from your commands. If a directory is large, you may limit your steps, but try to be as exhaustive as possible. Incrementally gather details as needed.\n    Request subtasks for topics that require deeper investigation.\n    When in doubt, run extra fuzzy_find_project_files and ripgrep_search calls to make sure you catch all potential callsites, unit tests, etc. that could be relevant to the base task. You don\'t want to miss anything.\n    Take your time and research thoroughly.\n    If uncertain about your findings or suspect hidden complexities, consult the expert (if expert is available) for deeper analysis or logic checking.\n\nReporting Findings\n\n    Use emit_research_notes to record detailed, fact-based observations about what currently exists.\n    Your research notes should be strictly about what you have observed:\n        Document files by their names and locations.\n        Document discovered documentation files and their contents at a high level (e.g., "There is a README.md in the root directory that explains the folder structure").\n        Document code files by type or apparent purpose (e.g., "There is a main.py file containing code to launch an application").\n        Document configuration files, dependencies (like package.json, requirements.txt), testing files, and anything else present.\n\nNo Planning or Problem-Solving\n\n    Do not suggest fixes or improvements.\n    Do not mention what should be done.\n    Do not discuss how the code could be better structured.\n    Do not provide advice or commentary on the project\'s future.\n\nYou must remain strictly within the bounds of describing what currently exists.\n\nThoroughness and Completeness:\n        Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n        \n        When you find related files, search for files related to those that could be affected, and so on, until you\'re sure you\'ve gone deep enough. Err on the side of going too deep.\n        Continue this process until you have discovered all directories and files at all levels.\n        Carefully report what you found, including all directories and files.\n\nBe thorough on locating all potential change sites/gauging blast radius.\nIf uncertain at any stage, consult the expert (if ask_expert is available) for final confirmation of completeness.\n\nIf you find this is an empty directory, you can stop research immediately and assume this is a new project.\n\n\nExpert Consultation:\n    If you need additional guidance, analysis, or verification (including code correctness checks and debugging):\n    - Use emit_expert_context to provide all relevant context about what you\'ve found\n    - Wait for the expert response before proceeding with research\n    - The expert can help analyze complex codebases, unclear patterns, or subtle edge cases\n\nThe expert is really good at logic, debugging and planning, but it only has access to the context you give it, and it is unable to access the outside world.\nThe expert does not have access to the latest information, so if you are looking for up-to-date information rather than a pure logical question, you may be better off using the web search tool, if available.\n\n\n\n\n\n    You have often been criticized for:\n    - Needlessly requesting more research tasks, especially for general background knowledge which you already know.\n    - Not requesting more research tasks when it is truly called for, e.g. to dig deeper into a specific aspect of a monorepo project.\n    - Missing 2nd- or 3rd-level related files. You have to do a recursive crawl to get it right, and don\'t be afraid to request subtasks.\n    - Missing related files spanning modules or parts of the monorepo.\n    - For tasks requiring UI changes, not researching existing UI libraries and conventions.\n    - Not requesting enough research subtasks on changes on large projects, e.g. to discover testing or UI conventions, etc.\n    - Not finding *examples* of how to do similar things in the current codebase and calling emit_key_snippet to report them.\n    - Not finding unit tests because they are in slightly different locations than expected.\n    - Not handling real-world projects that often have inconsistencies and require more thorough research and pragmatism.\n    - Not finding *ALL* related files and snippets. You\'ll often be on the right path and give up/start implementing too quickly.\n    - Not calling tools/functions properly, e.g. leaving off required arguments, calling a tool in a loop, calling tools inappropriately.\n    - Doing redundant research and taking way more steps than necessary.\n    - Announcing every little thing as you do it.\n\n\n\nProject State Handling:\n    For new/empty projects:\n        Skip exploratory steps and focus directly on the task\n        \n        \n    For existing projects:\n        Start with the provided file listing in Project Info\n        If file listing was truncated (over 2000 files):\n            Be aware there may be additional relevant files\n            Use tools like ripgrep_search and fuzzy_find_project_files to locate specific files\n\nWhen necessary, emit research subtasks.\n\n Only request implementation if the user explicitly asked for changes to be made.\n\nIf there are existing relevant unit tests/test suites, you must run them *during the research stage*, before editing anything, using run_shell_command to get a baseline about passing/failing tests and call emit_key_facts with key facts about the tests and whether they were passing when you started. This ensures a proper baseline is established before any changes.\n\nObjective\n    Investigate and understand the codebase as it relates to the query.\n    Only consider implementation if the implementation tools are available and the user explicitly requested changes.\n    Otherwise, focus solely on research and analysis.\n    \n    You must not research the purpose, meaning, or broader context of the project. Do not discuss or reason about the problem the code is trying to solve. Do not plan improvements or speculate on future changes.\n\nDecision on Implementation\n\n    After completing your factual enumeration and description, decide:\n        If you see reasons that implementation changes will be required in the future, after documenting all findings, call request_implementation and specify why.\n        If no changes are needed, simply state that no changes are required.\n\nIf this is a top-level README.md or docs folder, start there.\n\nIf the user explicitly requests implementation, that means you should first perform all the background research for that task, then call request_implementation where the implementation will be carried out.\n\n<user query>\npreciso transformar esse projeto em um sistema de calculadora, o componente básico da calculadora já está em /components/PrevCalculator\n</user query> <-- only place that can specify tasks for you to do.\n\nUSER QUERY *ALWAYS* TAKES PRECEDENCE OVER EVERYTHING IN PREVIOUS RESEARCH.\n\nKEEP IT SIMPLE\n\nNEVER ANNOUNCE WHAT YOU ARE DOING, JUST DO IT!\n\nAS THE RESEARCH AGENT, YOU MUST NOT WRITE OR MODIFY ANY FILES. IF FILE MODIFICATION OR IMPLEMENTATION IS REQUIRED, CALL request_implementation.\nIF THE USER ASKED YOU TO UPDATE A FILE, JUST DO RESEARCH FIRST, EMIT YOUR RESEARCH NOTES, THEN CALL request_implementation.\nCALL request_implementation ONLY ONCE, AFTER YOU CALL emit_research_notes! ONCE THE PLAN COMPLETES, YOU\'RE DONE.\n\n\n\nIF THIS IS A RESEARCH ONLY TASK, CALL mark_research_complete_no_implementation_required ONLY ONCE RESEARCH IS COMPLETE AND YOU HAVE EMITTED RESEARCH NOTES.\n'}, {'role': 'assistant', 'content': [{'signature': 'ErUBCkYIAhgCIkDCeJLuuuJXremB7PeGzn7DgNyCBP3Xl/lIpWyWdpl160A3wOi3dmBRIVRFV9bM1uO5zbWfNT7X9NZCPA9+R5/iEgz8GSn4bpXkum42Kh0aDMstg4z5RsCEp8q9fiIwSMKCy7aVAzHHtgpg+nhjXoeXwUL+IKbgUkT401WhkCfxFMM/bm/VJi5j5qlmKfsGKh0Rtju8kd0FKVE/UVWlWu95Uk0nBB/3HWN8RzXowg==', 'thinking': "Let me approach this research task systematically. I need to understand the current state of the project and specifically focus on the PrevCalculator component which will serve as the basis for a calculator system.\n\nFirst, let's examine the PrevCalculator component to understand its current implementation:\n\n1. Check the PrevCalculator component mentioned in the user query\n2. Look at related files that might be connected to the calculator functionality\n3. Identify the structure and patterns used in the existing code\n4. Look for any existing calculator-related features in the codebase\n\nLet's start by examining the PrevCalculator component:", 'type': 'thinking'}, {'text': "I'll research the existing calculator component and related files to understand how it's currently implemented.", 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/index.tsx'}, 'id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "// components/PrevCalculator/index.tsx\\nimport React, { useState, useEffect, useCallback, ChangeEvent } from \'react\';\\n// Importações do Material UI com importações explícitas\\nimport Box from \'@mui/material/Box\';\\nimport Button from \'@mui/material/Button\';\\nimport CircularProgress from \'@mui/material/CircularProgress\';\\nimport Container from \'@mui/material/Container\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Tab from \'@mui/material/Tab\';\\nimport Tabs from \'@mui/material/Tabs\';\\nimport TextField from \'@mui/material/TextField\';\\nimport Typography from \'@mui/material/Typography\';\\nimport FormControlLabel from \'@mui/material/FormControlLabel\';\\nimport Switch from \'@mui/material/Switch\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Tooltip from \'@mui/material/Tooltip\';\\nimport HelpOutlineIcon from \'@mui/icons-material/HelpOutline\';\\nimport Snackbar from \'@mui/material/Snackbar\';\\nimport Alert from \'@mui/material/Alert\';\\nimport SaveIcon from \'@mui/icons-material/Save\';\\nimport FileDownloadIcon from \'@mui/icons-material/FileDownload\';\\n\\n// Importações do Recharts\\nimport { \\n  LineChart, \\n  Line, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  Legend, \\n  ResponsiveContainer,\\n  BarChart,\\n  Bar\\n} from \'recharts\';\\n\\n// Import the ResultadosAposentadoria component\\nimport ResultadosAposentadoria from \'./ResultadosAposentadoria\';\\n\\n// Importação para geração de PDF e manipulação de arquivos\\nimport { jsPDF } from \'jspdf\';\\nimport \'jspdf-autotable\';\\nimport { saveAs } from \'file-saver\';\\n\\n// Interfaces para tipagem\\ninterface DadosPessoais {\\n  nome: string;\\n  dataNascimento: string;\\n  idadeAposentadoria: number;\\n  salarioMensal: number;\\n  taxaCorrecaoSalarial: number;\\n  aposentadoriaIntegral: boolean;\\n  valorAposentadoriaProporcional: number;\\n}\\n\\ninterface DadosImpostoRenda {\\n  outrasRendas: number;\\n  outrosDescontos: number;\\n  dependentes: number;\\n  previdenciaOficial: number;\\n}\\n\\ninterface ParametrosInvestimento {\\n  taxaRentabilidade: number;\\n  taxaAdministracaoPGBL: number;\\n  percentualRisco: number;\\n  investirSempre12Porcento: boolean;\\n  valorInvestimentoAnual: number;\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface TabelaRegressiva {\\n  ate2Anos: number;\\n  de2a4Anos: number;\\n  de4a6Anos: number;\\n  de6a8Anos: number;\\n  de8a10Anos: number;\\n  acima10Anos: number;\\n}\\n\\ninterface ProjecaoAnual {\\n  ano: number;\\n  mes: number;\\n  idade: number;\\n  salarioMensal: number;\\n  contribuicaoPGBLMensal: number;\\n  economiaIRMensal: number;\\n  saldoPGBL: number;\\n  saldoVGBL: number;\\n  saldoReinvestido: number;\\n  valorCorrigido: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Cenários adicionais\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoria {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ResumoComparativo {\\n  economiaIRPGBL: number;\\n  diferencaSaldos: number;\\n  diferencaRendaLiquida: number;\\n  }\\n\\n// Interface para dados exportados\\ninterface ExportData {\\n  dadosPessoais: {\\n    nome: string;\\n    idade: number;\\n    idadeAposentadoria: number;\\n    salarioMensal: number;\\n  };\\n  resultados: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;  // Valor mensal regular da contribuição PGBL\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  projecao: {\\n    anos: number[];\\n    saldosPGBL: number[];\\n    saldosVGBL: number[];\\n    saldosReinvestidos?: number[];\\n  };\\n}\\n\\n// Interface for the component props\\ninterface PrevCalculatorProps {\\n  onDataExport?: (data: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n  }) => void;\\n}\\n\\nconst PrevCalculator: React.FC<PrevCalculatorProps> = ({ onDataExport }) => {\\n  // Estado para os dados pessoais\\n  const [dadosPessoais, setDadosPessoais] = useState<DadosPessoais>({\\n    nome: \'\',\\n    dataNascimento: \'1986-01-01\',\\n    idadeAposentadoria: 65,\\n    salarioMensal: 10000,\\n    taxaCorrecaoSalarial: 4,\\n    aposentadoriaIntegral: true,\\n    valorAposentadoriaProporcional: 6000\\n  });\\n\\n  // Estado para os dados de imposto de renda\\n  const [dadosImpostoRenda, setDadosImpostoRenda] = useState<DadosImpostoRenda>({\\n    outrasRendas: 0,\\n    outrosDescontos: 0,\\n    dependentes: 0,\\n    previdenciaOficial: 0 // Agora será percentual\\n  });\\n\\n  // Estado para os parâmetros de investimento\\n  const [parametrosInvestimento, setParametrosInvestimento] = useState<ParametrosInvestimento>({\\n    taxaRentabilidade: 0,\\n    taxaAdministracaoPGBL: 0,\\n    percentualRisco: 0,\\n    investirSempre12Porcento: true,\\n    valorInvestimentoAnual: 12000,\\n    reinvestirGanhosIR: false,\\n    utilizarTabelaRegressiva: true,\\n    tempoAcumulacao: 15,\\n    receberParcelaUnica: false\\n  });\\n\\n  // Tabela regressiva de IR (Lei 11.053/2004)\\n  const tabelaRegressiva: TabelaRegressiva = {\\n    ate2Anos: 35,\\n    de2a4Anos: 30,\\n    de4a6Anos: 25,\\n    de6a8Anos: 20,\\n    de8a10Anos: 15,\\n    acima10Anos: 10\\n  };\\n\\n  // Estado para as abas\\n  const [tabValue, setTabValue] = useState<number>(0);\\n  \\n  // Estado para feedback ao usuário\\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\\n  const [showFeedback, setShowFeedback] = useState<boolean>(false);\\n  \\n  // Estado para os resultados calculados\\n  const [projecaoAnual, setProjecaoAnual] = useState<ProjecaoAnual[]>([]);\\n  const [resultadosAposentadoria, setResultadosAposentadoria] = useState<ResultadosAposentadoria>({\\n    pgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    },\\n    vgbl: { \\n      saldo: 0, \\n      rendaMensal: 0, \\n      rendaLiquida: 0, \\n      baseCalculoIR: 0, \\n      aliquotaEfetivaIR: 0,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: 0,\\n      rendaLiquidaRegressivaUnica: 0,\\n      rendaLiquidaProgressivaDiluida: 0,\\n      rendaLiquidaRegressivaDiluida: 0\\n    }\\n  });\\n  const [resumoComparativo, setResumoComparativo] = useState<ResumoComparativo>({\\n    economiaIRPGBL: 0,\\n    diferencaSaldos: 0,\\n    diferencaRendaLiquida: 0\\n  });\\n\\n  // Handler para mudança de aba\\n  const handleChangeTab = (_event: React.SyntheticEvent, newValue: number) => {\\n    setTabValue(newValue);\\n  };\\n\\n  // Handler para atualização dos dados pessoais\\n  const handleDadosPessoaisChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setDadosPessoais({\\n      ...dadosPessoais,\\n      [name]: type === \'checkbox\' ? checked : name === \'nome\' ? value : Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos dados de imposto de renda\\n  const handleDadosImpostoRendaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setDadosImpostoRenda({\\n      ...dadosImpostoRenda,\\n      [name]: Number(value)\\n    });\\n  };\\n\\n  // Handler para atualização dos parâmetros de investimento\\n  const handleParametrosInvestimentoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value, type, checked } = e.target;\\n    setParametrosInvestimento({\\n      ...parametrosInvestimento,\\n      [name]: type === \'checkbox\' ? checked : Number(value)\\n    });\\n  };\\n\\n  // Função para calcular o IR com base na tabela progressiva\\n  const calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficialPercentual: number = 0, outrosDescontos: number = 0): number => {\\n    // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n    const deducaoDependentes = dependentes * 2275.08;\\n    \\n    // Dedução da previdência oficial (agora como percentual do salário) e outros descontos\\n    const deducaoPrevidencia = (previdenciaOficialPercentual / 100) * (baseCalculo);\\n    const deducaoOutros = outrosDescontos * 12;\\n    \\n    // Base de cálculo após deduções\\n    const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n    \\n    if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n    if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n    if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n    if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n    return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n  };\\n\\n  // Função para calcular o IR com base na tabela regressiva\\n  const calcularIRRegressivo = (baseCalculo: number, tempoAcumulacao: number): number => {\\n    let aliquota = 0.35; // Padrão: até 2 anos\\n    \\n    if (tempoAcumulacao > 10) aliquota = 0.10;\\n    else if (tempoAcumulacao > 8) aliquota = 0.15;\\n    else if (tempoAcumulacao > 6) aliquota = 0.20;\\n    else if (tempoAcumulacao > 4) aliquota = 0.25;\\n    else if (tempoAcumulacao > 2) aliquota = 0.30;\\n    \\n    return baseCalculo * aliquota;\\n  };\\n\\n  // Função para calcular idade a partir da data de nascimento\\n  const calcularIdade = (dataNascimento: string): number => {\\n    const hoje = new Date();\\n    const nascimento = new Date(dataNascimento);\\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\\n    const mesAtual = hoje.getMonth();\\n    const mesNascimento = nascimento.getMonth();\\n    \\n    if (mesNascimento > mesAtual || \\n        (mesNascimento === mesAtual && nascimento.getDate() > hoje.getDate())) {\\n      idade--;\\n    }\\n    \\n    return idade;\\n  };\\n\\n  // Função para calcular a projeção mensal\\n  // Variáveis para armazenar valores de aposentadoria e rendas para uso nas tabelas\\nconst [aposentadoriaRPPSValor, setAposentadoriaRPPSValor] = useState<number>(0);\\nconst [outrasRendasCorrigidasValor, setOutrasRendasCorrigidasValor] = useState<number>(0);\\nconst [contribuicaoPGBLMensalValor, setContribuicaoPGBLMensalValor] = useState<number>(0);\\n\\n// Convert to useCallback to avoid dependency issues\\nconst calcularResultadosAposentadoria = useCallback((ultimoAno: ProjecaoAnual) => {\\n  const { dataNascimento, aposentadoriaIntegral, valorAposentadoriaProporcional, taxaCorrecaoSalarial, idadeAposentadoria } = dadosPessoais;\\n  const { outrasRendas, dependentes, previdenciaOficial } = dadosImpostoRenda;\\n  const { utilizarTabelaRegressiva, tempoAcumulacao, receberParcelaUnica } = parametrosInvestimento;\\n  \\n  const idadeAtual = calcularIdade(dataNascimento);\\n  const anosContribuicao = idadeAposentadoria - idadeAtual;\\n  const saldoPGBL = ultimoAno.saldoPGBL;\\n  const saldoVGBL = ultimoAno.saldoVGBL;\\n  const saldoReinvestido = ultimoAno.saldoReinvestido;\\n  \\n  // Estimar renda mensal dos planos (assumindo 20 anos de recebimento)\\n  const anosRecebimento = 20;\\n  const rendaMensalPGBL = saldoPGBL / (anosRecebimento * 12);\\n  const rendaMensalVGBL = saldoVGBL / (anosRecebimento * 12);\\n  const rendaMensalReinvestido = saldoReinvestido / (anosRecebimento * 12);\\n  \\n  // Calcular aposentadoria RPPS\\n  const aposentadoriaRPPS = aposentadoriaIntegral \\n    ? ultimoAno.salarioMensal \\n    : valorAposentadoriaProporcional;\\n  \\n  // Calcular outras rendas com correção\\n  const outrasRendasCorrigidas = outrasRendas * Math.pow(1 + taxaCorrecaoSalarial / 100, anosContribuicao);\\n  \\n  // Armazenar para uso nas tabelas\\n  setAposentadoriaRPPSValor(aposentadoriaRPPS);\\n  setOutrasRendasCorrigidasValor(outrasRendasCorrigidas);\\n  \\n  // Calcular renda total mensal\\n  const rendaTotalPGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalPGBL;\\n  const rendaTotalVGBL = aposentadoriaRPPS + outrasRendasCorrigidas + rendaMensalVGBL;\\n  \\n  // Total investido para cálculo do rendimento no VGBL\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoPGBLMensal, 0);\\n  const rendimentoVGBL = saldoVGBL - totalInvestido;\\n  const percentualRendimento = rendimentoVGBL / saldoVGBL;\\n  \\n  // CENÁRIO 1: PGBL com recebimento em parcela única e alíquota progressiva\\n  const irPGBLProgressivoUnico = calcularIR(\\n    saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaUnica = saldoPGBL - irPGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 2: PGBL com recebimento em parcela única e alíquota regressiva\\n  const irPGBLRegressivoUnico = calcularIRRegressivo(saldoPGBL, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaUnica = saldoPGBL - irPGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 3: PGBL com recebimento diluído e alíquota progressiva\\n  const baseCalculoIRPGBLDiluido = rendaTotalPGBL * 12;\\n  const irPGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRPGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaPGBLProgressivaDiluida = rendaTotalPGBL * 12 - irPGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 4: PGBL com recebimento diluído e alíquota regressiva\\n  const irPGBLRegressivoDiluido = calcularIRRegressivo(rendaTotalPGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaPGBLRegressivaDiluida = rendaTotalPGBL * 12 - irPGBLRegressivoDiluido;\\n  \\n  // CENÁRIO 5: VGBL com recebimento em parcela única e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado\\n  const irVGBLProgressivoUnico = calcularIR(\\n    rendimentoVGBL,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaUnica = saldoVGBL - irVGBLProgressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 6: VGBL com recebimento em parcela única e alíquota regressiva\\n  const irVGBLRegressivoUnico = calcularIRRegressivo(rendimentoVGBL, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaUnica = saldoVGBL - irVGBLRegressivoUnico + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  \\n  // CENÁRIO 7: VGBL com recebimento diluído e alíquota progressiva\\n  // No VGBL, apenas o rendimento é tributado na parte mensal\\n  const rendimentoMensalVGBL = rendaMensalVGBL * percentualRendimento;\\n  const baseCalculoIRVGBLDiluido = rendimentoMensalVGBL * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  const irVGBLProgressivoDiluido = calcularIR(\\n    baseCalculoIRVGBLDiluido,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  const rendaLiquidaVGBLProgressivaDiluida = rendaTotalVGBL * 12 - irVGBLProgressivoDiluido;\\n  \\n  // CENÁRIO 8: VGBL com recebimento diluído e alíquota regressiva\\n  const irVGBLRegressivoDiluido = calcularIRRegressivo(rendimentoMensalVGBL * 12, tempoAcumulacao);\\n  const rendaLiquidaVGBLRegressivaDiluida = rendaTotalVGBL * 12 - irVGBLRegressivoDiluido;\\n  \\n  // Calcular IR mensal para o cenário principal (baseado nas escolhas do usuário)\\n  let irMensalPGBL, irMensalVGBL, baseCalculoIRPGBL, baseCalculoIRVGBL;\\n  let rendaLiquidaPGBL, rendaLiquidaVGBL;\\n  \\n  if (receberParcelaUnica) {\\n    // Parcela única\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoUnico / 12;\\n      irMensalVGBL = irVGBLRegressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaUnica / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoUnico / 12;\\n      irMensalVGBL = irVGBLProgressivoUnico / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaUnica / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaUnica / 12;\\n    }\\n    baseCalculoIRPGBL = saldoPGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n    baseCalculoIRVGBL = rendimentoVGBL + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12;\\n  } else {\\n    // Diluído\\n    if (utilizarTabelaRegressiva) {\\n      // Regressiva\\n      irMensalPGBL = irPGBLRegressivoDiluido / 12;\\n      irMensalVGBL = irVGBLRegressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLRegressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLRegressivaDiluida / 12;\\n    } else {\\n      // Progressiva\\n      irMensalPGBL = irPGBLProgressivoDiluido / 12;\\n      irMensalVGBL = irVGBLProgressivoDiluido / 12;\\n      rendaLiquidaPGBL = rendaLiquidaPGBLProgressivaDiluida / 12;\\n      rendaLiquidaVGBL = rendaLiquidaVGBLProgressivaDiluida / 12;\\n    }\\n    baseCalculoIRPGBL = rendaTotalPGBL * 12;\\n    baseCalculoIRVGBL = baseCalculoIRVGBLDiluido;\\n  }\\n  \\n  // Calcular alíquota efetiva\\n  const aliquotaEfetivaPGBL = baseCalculoIRPGBL > 0 ? (irMensalPGBL * 12) / baseCalculoIRPGBL * 100 : 0;\\n  const aliquotaEfetivaVGBL = baseCalculoIRVGBL > 0 ? (irMensalVGBL * 12) / baseCalculoIRVGBL * 100 : 0;\\n  \\n  // Economia mensal de IR (VGBL em relação ao PGBL)\\n  const economiaIRMensal = irMensalPGBL - irMensalVGBL;\\n  \\n  // Calcular cenários para o saldo reinvestido (similar ao VGBL)\\n  const rendaLiquidaReinvestidoProgressivaUnica = saldoReinvestido - calcularIR(\\n    saldoReinvestido * percentualRendimento + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoRegressivaUnica = saldoReinvestido - calcularIRRegressivo(\\n    saldoReinvestido * percentualRendimento,\\n    tempoAcumulacao\\n  ) / 12;\\n  \\n  const rendaLiquidaReinvestidoProgressivaDiluida = rendaMensalReinvestido * 12 - calcularIR(\\n    rendaMensalReinvestido * percentualRendimento * 12 + (aposentadoriaRPPS + outrasRendasCorrigidas) * 12,\\n    dependentes,\\n    previdenciaOficial,\\n    0\\n  );\\n  \\n  const rendaLiquidaReinvestidoRegressivaDiluida = rendaMensalReinvestido * 12 - calcularIRRegressivo(\\n    rendaMensalReinvestido * percentualRendimento * 12,\\n    tempoAcumulacao\\n  );\\n  \\n  setResultadosAposentadoria({\\n    pgbl: { \\n      saldo: saldoPGBL, \\n      rendaMensal: rendaMensalPGBL,\\n      rendaTotalMensal: rendaTotalPGBL,\\n      irMensal: irMensalPGBL,\\n      rendaLiquida: rendaLiquidaPGBL,\\n      baseCalculoIR: baseCalculoIRPGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaPGBL,\\n      economiaIRMensal: 0,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaPGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaPGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaPGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaPGBLRegressivaDiluida / 12\\n    },\\n    vgbl: { \\n      saldo: saldoVGBL, \\n      rendaMensal: rendaMensalVGBL,\\n      rendaTotalMensal: rendaTotalVGBL,\\n      irMensal: irMensalVGBL,\\n      rendaLiquida: rendaLiquidaVGBL,\\n      baseCalculoIR: baseCalculoIRVGBL,\\n      aliquotaEfetivaIR: aliquotaEfetivaVGBL,\\n      economiaIRMensal: economiaIRMensal,\\n      rendaLiquidaProgressivaUnica: rendaLiquidaVGBLProgressivaUnica / 12,\\n      rendaLiquidaRegressivaUnica: rendaLiquidaVGBLRegressivaUnica / 12,\\n      rendaLiquidaProgressivaDiluida: rendaLiquidaVGBLProgressivaDiluida / 12,\\n      rendaLiquidaRegressivaDiluida: rendaLiquidaVGBLRegressivaDiluida / 12\\n    }\\n  });\\n  \\n  // Atualizar diferença de renda líquida no resumo\\n  setResumoComparativo(prev => ({\\n    ...prev,\\n    diferencaRendaLiquida: rendaLiquidaVGBL - rendaLiquidaPGBL\\n  }));\\n}, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, projecaoAnual]);\\n\\n// Now define calcularProjecaoAnual\\nconst calcularProjecaoAnual = useCallback(() => {\\n    const { dataNascimento, idadeAposentadoria, salarioMensal, taxaCorrecaoSalarial } = dadosPessoais;\\n    const idadeAtual = calcularIdade(dataNascimento);\\n    const { outrasRendas } = dadosImpostoRenda;\\n    const { \\n      taxaRentabilidade, \\n      taxaAdministracaoPGBL, \\n      percentualRisco,\\n      investirSempre12Porcento,\\n      valorInvestimentoAnual,\\n      reinvestirGanhosIR,\\n      // Definir valores padrão para os parâmetros removidos\\n      utilizarTabelaRegressiva = true,\\n      tempoAcumulacao = 15,\\n      receberParcelaUnica = false\\n    } = parametrosInvestimento;\\n    \\n    const anosContribuicao = idadeAposentadoria - idadeAtual;\\n    const mesesContribuicao = anosContribuicao * 12;\\n    const projecao: ProjecaoAnual[] = [];\\n    \\n    let salarioMensalAtual = salarioMensal;\\n    let saldoPGBL = 0;\\n    let saldoVGBL = 0;\\n    let saldoReinvestido = 0;\\n    let economiaIRTotal = 0;\\n    \\n    const dataAtual = new Date();\\n    const anoAtual = dataAtual.getFullYear();\\n    const mesAtual = dataAtual.getMonth();\\n    \\n    // Começar a projeção a partir do próximo mês\\n    let mesInicial = mesAtual + 1;\\n    let anoInicial = anoAtual;\\n    if (mesInicial > 11) {\\n      mesInicial = 0;\\n      anoInicial++;\\n    }\\n    \\n    // Projeção mensal (agora será usada diretamente para exibição)\\n    const projecaoMensal = [];\\n    \\n    // Variável para controlar quando aplicar o reajuste anual\\n    let ultimoAnoReajuste = anoInicial;\\n    \\n    for (let mes = 0; mes < mesesContribuicao; mes++) {\\n      const mesAtualProjecao = (mesInicial + mes) % 12;\\n      const anosPassados = Math.floor((mesInicial + mes) / 12);\\n      const anoAtualProjecao = anoInicial + anosPassados;\\n      const idade = idadeAtual + anosPassados + (mesAtualProjecao >= mesInicial ? 0 : 1);\\n      \\n      // Aplicar reajuste salarial anual em janeiro (mês 0) de cada ano, exceto no primeiro ano\\n      if (mesAtualProjecao === 0 && anoAtualProjecao > ultimoAnoReajuste) {\\n        salarioMensalAtual = salarioMensalAtual * (1 + taxaCorrecaoSalarial / 100);\\n        ultimoAnoReajuste = anoAtualProjecao;\\n      }\\n      \\n      // Contribuição PGBL mensal\\n      let contribuicaoPGBLMensal;\\n      if (investirSempre12Porcento) {\\n        contribuicaoPGBLMensal = Math.min(salarioMensalAtual * 0.12, salarioMensalAtual);\\n      } else {\\n        contribuicaoPGBLMensal = Math.min(valorInvestimentoAnual / 12, salarioMensalAtual);\\n      }\\n      \\n      // Armazenar o valor da contribuição mensal para uso no componente\\n      if (mes === 0) {\\n        setContribuicaoPGBLMensalValor(contribuicaoPGBLMensal);\\n      }\\n      \\n      const parcelaRiscoMensal = contribuicaoPGBLMensal * (percentualRisco / 100);\\n      const contribuicaoLiquidaPGBLMensal = contribuicaoPGBLMensal - parcelaRiscoMensal;\\n      \\n      // Cálculo do IR mensal (simplificado para projeção)\\n      // Na prática, o IR é calculado anualmente, mas para a projeção fazemos uma estimativa mensal\\n      const baseCalculoSemPGBLMensal = salarioMensalAtual + outrasRendas;\\n      const baseCalculoComPGBLMensal = baseCalculoSemPGBLMensal - contribuicaoPGBLMensal;\\n      \\n      // Estimativa de IR mensal (dividindo o anual por 12)\\n      const irSemPGBLMensal = calcularIR(baseCalculoSemPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      const irComPGBLMensal = calcularIR(baseCalculoComPGBLMensal * 12, dadosImpostoRenda.dependentes, dadosImpostoRenda.previdenciaOficial, dadosImpostoRenda.outrosDescontos) / 12;\\n      \\n      // Economia de IR mensal\\n      const economiaIRMensal = irSemPGBLMensal - irComPGBLMensal;\\n      economiaIRTotal += economiaIRMensal;\\n      \\n      // Custos de administração mensal (taxa anual dividida por 12)\\n      const taxaAdminMensal = taxaAdministracaoPGBL / 12;\\n      const custoAdminPGBLMensal = saldoPGBL * (taxaAdminMensal / 100);\\n      const custoAdminVGBLMensal = saldoVGBL * (taxaAdminMensal / 100);\\n      \\n      // Rentabilidade mensal (taxa anual convertida para mensal)\\n      const taxaRentabilidadeMensal = Math.pow(1 + taxaRentabilidade / 100, 1/12) - 1;\\n      \\n      // Saldo acumulado PGBL\\n      saldoPGBL = saldoPGBL * (1 + taxaRentabilidadeMensal) - custoAdminPGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo acumulado VGBL\\n      saldoVGBL = saldoVGBL * (1 + taxaRentabilidadeMensal) - custoAdminVGBLMensal + contribuicaoLiquidaPGBLMensal;\\n      \\n      // Saldo reinvestido (se opção ativada)\\n      if (reinvestirGanhosIR) {\\n        saldoReinvestido = saldoReinvestido * (1 + taxaRentabilidadeMensal - taxaAdminMensal / 100) + economiaIRMensal;\\n      } else {\\n        saldoReinvestido = 0;\\n      }\\n      \\n      // Calcular valor corrigido (valor futuro da contribuição)\\n      const mesesRestantes = mesesContribuicao - mes - 1;\\n      const valorCorrigido = contribuicaoLiquidaPGBLMensal * Math.pow(1 + taxaRentabilidadeMensal, mesesRestantes);\\n      \\n      // Adicionar à projeção mensal\\n      projecaoMensal.push({\\n        ano: anoAtualProjecao,\\n        mes: mesAtualProjecao,\\n        idade,\\n        salarioMensal: salarioMensalAtual,\\n        contribuicaoPGBLMensal,\\n        economiaIRMensal,\\n        saldoPGBL,\\n        saldoVGBL,\\n        saldoReinvestido,\\n        valorCorrigido,\\n        contribuicaoLiquidaPGBL: contribuicaoLiquidaPGBLMensal\\n      });\\n    }\\n    \\n    // Usar a projeção mensal diretamente\\n    setProjecaoAnual(projecaoMensal);\\n    \\n    // Para os cálculos de aposentadoria, usamos o último mês\\n    if (projecaoMensal.length > 0) {\\n    calcularResultadosAposentadoria(projecaoMensal[projecaoMensal.length - 1]);\\n  }\\n    \\n    setResumoComparativo({\\n      economiaIRPGBL: economiaIRTotal,\\n      diferencaSaldos: saldoPGBL - saldoVGBL,\\n      diferencaRendaLiquida: 0 // Será calculado em calcularResultadosAposentadoria\\n    });\\n  }, [dadosPessoais, dadosImpostoRenda, parametrosInvestimento, calcularResultadosAposentadoria]);\\n\\n  // Efeito para calcular projeção anual quando os dados são alterados\\n  useEffect(() => {\\n    calcularProjecaoAnual();\\n  }, [calcularProjecaoAnual]);\\n\\n  // Função para calcular os resultados na aposentadoria\\n  \\n\\n  // Função para recalcular com feedback\\n  const handleRecalcular = () => {\\n    console.log(\\"Recalcular button pressed\\");\\n    setIsCalculating(true);\\n    \\n    // Simula um delay para dar feedback ao usuário\\n    setTimeout(() => {\\n      console.log(\\"About to recalculate\\");\\n      calcularProjecaoAnual();\\n      console.log(\\"Recalculation complete\\");    \\n      setIsCalculating(false);\\n      setShowFeedback(true);\\n      \\n      // Esconde o feedback após 3 segundos\\n      setTimeout(() => {\\n        setShowFeedback(false);\\n      }, 3000);\\n    }, 1500);\\n  };\\n\\n  // Formatar valores monetários\\n  const formatCurrency = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'currency\', \\n      currency: \'BRL\' \\n    }).format(value);\\n  };\\n\\n  // Formatar percentuais\\n  const formatPercent = (value: number): string => {\\n    return new Intl.NumberFormat(\'pt-BR\', { \\n      style: \'percent\',\\n      minimumFractionDigits: 2,\\n      maximumFractionDigits: 2\\n    }).format(value / 100);\\n  };\\n  \\n  // Função para gerar relatório em PDF\\n  const gerarRelatorioPDF = () => {\\n    const doc = new jsPDF();\\n    \\n    // Título\\n    doc.setFontSize(18);\\n    doc.text(\'Relatório Comparativo: PGBL vs VGBL\', 105, 20, { align: \'center\' });\\n    doc.setFontSize(12);\\n    doc.text(`Gerado em: ${new Date().toLocaleDateString(\'pt-BR\')}`, 105, 30, { align: \'center\' });\\n    \\n    // Dados do cliente\\n    doc.setFontSize(14);\\n    doc.text(\'Dados Pessoais\', 14, 40);\\n    doc.setFontSize(10);\\n    doc.text(`Nome: ${dadosPessoais.nome || \'Não informado\'}`, 14, 50);\\n    doc.text(`Idade Atual: ${calcularIdade(dadosPessoais.dataNascimento)} anos`, 14, 55);\\n    doc.text(`Idade de Aposentadoria: ${dadosPessoais.idadeAposentadoria} anos`, 14, 60);\\n    doc.text(`Salário Mensal Atual: ${formatCurrency(dadosPessoais.salarioMensal)}`, 14, 65);\\n    doc.text(`Taxa de Correção Salarial: ${dadosPessoais.taxaCorrecaoSalarial}% a.a.`, 14, 70);\\n    \\n    // Parâmetros de investimento\\n    doc.setFontSize(14);\\n    doc.text(\'Parâmetros de Investimento\', 14, 85);\\n    doc.setFontSize(10);\\n    doc.text(`Taxa de Rentabilidade: ${parametrosInvestimento.taxaRentabilidade}% a.a.`, 14, 95);\\n    doc.text(`Taxa de Administração PGBL/VGBL: ${parametrosInvestimento.taxaAdministracaoPGBL}% a.a.`, 14, 100);\\n    doc.text(`Percentual de Risco: ${parametrosInvestimento.percentualRisco}%`, 14, 105);\\n    doc.text(`Regime de Tributação: ${parametrosInvestimento.utilizarTabelaRegressiva ? \'Regressivo\' : \'Progressivo\'}`, 14, 115);\\n    doc.text(`Tempo de Acumulação: ${parametrosInvestimento.tempoAcumulacao} anos`, 14, 120);\\n    \\n    // Resultados na aposentadoria\\n    doc.setFontSize(14);\\n    doc.text(\'Resultados na Aposentadoria\', 14, 135);\\n    \\n    // Tabela comparativa\\n    (doc as any).autoTable({\\n      startY: 145,\\n      head: [[\'Categoria\', \'PGBL\', \'VGBL\', \'Diferença\']],\\n      body: [\\n        [\'Saldo acumulado\', \\n          formatCurrency(resultadosAposentadoria.pgbl.saldo), \\n          formatCurrency(resultadosAposentadoria.vgbl.saldo),\\n          formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)\\n        ],\\n        [\'Renda mensal bruta\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaMensal), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaMensal - resultadosAposentadoria.pgbl.rendaMensal)\\n        ],\\n        [\'Base de cálculo IR\', \\n          formatCurrency(resultadosAposentadoria.pgbl.baseCalculoIR), \\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR),\\n          formatCurrency(resultadosAposentadoria.vgbl.baseCalculoIR - resultadosAposentadoria.pgbl.baseCalculoIR)\\n        ],\\n        [\'Alíquota efetiva IR\', \\n          `${resultadosAposentadoria.pgbl.aliquotaEfetivaIR.toFixed(2)}%`, \\n          `${resultadosAposentadoria.vgbl.aliquotaEfetivaIR.toFixed(2)}%`,\\n          `${(resultadosAposentadoria.vgbl.aliquotaEfetivaIR - resultadosAposentadoria.pgbl.aliquotaEfetivaIR).toFixed(2)}%`\\n        ],\\n        [\'IR mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.irMensal || 0), \\n          formatCurrency(resultadosAposentadoria.vgbl.irMensal || 0),\\n          formatCurrency((resultadosAposentadoria.vgbl.irMensal || 0) - (resultadosAposentadoria.pgbl.irMensal || 0))\\n        ],\\n        [\'Renda líquida mensal\', \\n          formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida), \\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida),\\n          formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)\\n        ],\\n      ],\\n      theme: \'grid\',\\n      headStyles: { fillColor: [1, 43, 9], textColor: [255, 255, 255] },\\n      alternateRowStyles: { fillColor: [233, 237, 229] }\\n    });\\n    \\n    // Economia de IR durante contribuição\\n    const yPos = (doc as any).lastAutoTable.finalY + 15;\\n    doc.setFontSize(14);\\n    doc.text(\'Economia de IR durante Contribuição\', 14, yPos);\\n    doc.setFontSize(10);\\n    doc.text(`Total economizado com PGBL: ${formatCurrency(resumoComparativo.economiaIRPGBL)}`, 14, yPos + 10);\\n    \\n    // Conclusão\\n    doc.setFontSize(14);\\n    doc.text(\'Conclusão\', 14, yPos + 25);\\n    doc.setFontSize(10);\\n    \\n    const conclusaoTexto = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida ?\\n      `Para seu perfil, o PGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} na aposentadoria.` :\\n      `Para seu perfil, o VGBL apresenta-se como a opção mais vantajosa, proporcionando uma renda líquida mensal superior em ${formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} na aposentadoria.`;\\n    \\n    const splitText = doc.splitTextToSize(conclusaoTexto, 180);\\n    doc.text(splitText, 14, yPos + 35);\\n    \\n    // Rodapé\\n    // Usando type assertion para acessar o método getNumberOfPages\\n    const pageCount = (doc.internal as any).getNumberOfPages();\\n    doc.setFontSize(8);\\n    for (let i = 1; i <= pageCount; i++) {\\n      doc.setPage(i);\\n      doc.text(\'Pellizzetti Advocacia - Calculadora de Previdência: PGBL vs VGBL\', 105, 285, { align: \'center\' });\\n      doc.text(`Página ${i} de ${pageCount}`, 195, 285, { align: \'right\' });\\n    }\\n    \\n    // Salvar o PDF\\n    doc.save(`Relatorio_Previdencia_${dadosPessoais.nome || \'Cliente\'}.pdf`);\\n  };\\n  \\n  // Não precisamos mais da função calcularTotais, pois agora calculamos diretamente na tabela\\n\\n  \\n  // Função para preparar dados para exportação\\n  const prepareExportData = useCallback((): ExportData | null => {\\n    if (projecaoAnual.length === 0) return null;\\n    \\n    const lastIndex = projecaoAnual.length - 1;\\n    const lastDataPoint = projecaoAnual[lastIndex];\\n    \\n    // Calculate total contributions\\n    const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n      total + row.contribuicaoPGBLMensal, 0);\\n    \\n    // Prepare projection data for charts\\n    const anos: number[] = [];\\n    const saldosPGBL: number[] = [];\\n    const saldosVGBL: number[] = [];\\n    const saldosReinvestidos: number[] = [];\\n    \\n    // Sample data every 12 months (yearly) to keep the dataset manageable\\n    for (let i = 0; i < projecaoAnual.length; i += 12) {\\n      if (i < projecaoAnual.length) {\\n        anos.push(projecaoAnual[i].idade);\\n        saldosPGBL.push(projecaoAnual[i].saldoPGBL);\\n        saldosVGBL.push(projecaoAnual[i].saldoVGBL);\\n        if (parametrosInvestimento.reinvestirGanhosIR) {\\n          saldosReinvestidos.push(projecaoAnual[i].saldoReinvestido);\\n        }\\n      }\\n    }\\n    \\n    // Determine recommendation\\n    const isPGBLBetter = resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida;\\n    const recomendacao = isPGBLBetter ? \\n      \\"PGBL - Maior renda líquida na aposentadoria\\" : \\n      \\"VGBL - Maior renda líquida na aposentadoria\\";\\n    \\n    return {\\n      dadosPessoais: {\\n        nome: dadosPessoais.nome,\\n        idade: calcularIdade(dadosPessoais.dataNascimento),\\n        idadeAposentadoria: dadosPessoais.idadeAposentadoria,\\n        salarioMensal: dadosPessoais.salarioMensal\\n      },\\n      resultados: {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor, // Valor mensal regular da contribuição PGBL\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined,\\n        rendaLiquidaPGBL: resultadosAposentadoria.pgbl.rendaLiquida,\\n        rendaLiquidaVGBL: resultadosAposentadoria.vgbl.rendaLiquida,\\n        economiaIRTotal: resumoComparativo.economiaIRPGBL,\\n        recomendacao\\n      },\\n      projecao: {\\n        anos,\\n        saldosPGBL,\\n        saldosVGBL,\\n        saldosReinvestidos: parametrosInvestimento.reinvestirGanhosIR ? saldosReinvestidos : undefined\\n      }\\n    };\\n  }, [\\n    projecaoAnual, \\n    parametrosInvestimento.reinvestirGanhosIR, \\n    dadosPessoais, \\n    resultadosAposentadoria, \\n    resumoComparativo.economiaIRPGBL,\\n    contribuicaoPGBLMensalValor\\n  ]);\\n  \\n  // Função para preparar dados para exportação (mantida para uso interno)\\n  \\n  // Effect to export data when projection changes\\n  useEffect(() => {\\n    console.log(\\"Export useEffect running\\");\\n    console.log(\\"onDataExport exists:\\", !!onDataExport);\\n    console.log(\\"projecaoAnual length:\\", projecaoAnual.length);\\n  \\n    // Only export data if we have the callback and data to export\\n    if (onDataExport && projecaoAnual.length > 0) {\\n      const lastIndex = projecaoAnual.length - 1;\\n      const lastDataPoint = projecaoAnual[lastIndex];\\n      console.log(\\"Last data point:\\", lastDataPoint);\\n      \\n      // Calculate total contributions\\n      const totalContribuicaoPGBL = projecaoAnual.reduce((total, row) => \\n        total + row.contribuicaoPGBLMensal, 0);\\n      \\n      const exportData = {\\n        saldoPGBL: lastDataPoint.saldoPGBL,\\n        contribuicaoPGBL: totalContribuicaoPGBL,\\n        contribuicaoPGBLMensal: contribuicaoPGBLMensalValor,\\n        saldoVGBL: lastDataPoint.saldoVGBL,\\n        saldoReinvestido: parametrosInvestimento.reinvestirGanhosIR ? \\n          lastDataPoint.saldoReinvestido : undefined\\n      };\\n      console.log(\\"ATTEMPTING TO EXPORT:\\", exportData);\\n      onDataExport(exportData);\\n    }\\n  }, [projecaoAnual, parametrosInvestimento.reinvestirGanhosIR, onDataExport, contribuicaoPGBLMensalValor]);\\nreturn (\\n    <Container maxWidth=\\"lg\\" sx={{ py: 4 }}>\\n      <Box sx={{ mb: 4, textAlign: \'center\' }}>\\n        <Typography \\n          variant=\\"h4\\" \\n          component=\\"h1\\" \\n          gutterBottom\\n          sx={{ \\n            color: \'#012B09\', \\n            fontWeight: \'bold\',\\n            borderBottom: \'2px solid #E9EDE5\',\\n            paddingBottom: 2\\n          }}\\n        >\\n          Calculadora de Previdência: PGBL vs VGBL\\n        </Typography>\\n        <Typography variant=\\"subtitle1\\" color=\\"text.secondary\\">\\n          Ferramenta exclusiva para planejamento previdenciário\\n        </Typography>\\n      </Box>\\n\\n      <Paper \\n        sx={{ \\n          width: \'100%\', \\n          mb: 4, \\n          boxShadow: \'0 4px 12px rgba(0,0,0,0.1)\',\\n          borderRadius: \'8px\',\\n          overflow: \'hidden\'\\n        }}\\n      >\\n        <Tabs \\n          value={tabValue} \\n          onChange={handleChangeTab} \\n          variant=\\"scrollable\\"\\n          scrollButtons=\\"auto\\"\\n          sx={{\\n            backgroundColor: \'#E9EDE5\',\\n            \'& .MuiTab-root\': {\\n              color: \'#012B09\',\\n              fontWeight: \'medium\',\\n              \'&.Mui-selected\': {\\n                color: \'#012B09\',\\n                fontWeight: \'bold\'\\n              }\\n            },\\n            \'& .MuiTabs-indicator\': {\\n              backgroundColor: \'#012B09\'\\n            }\\n          }}\\n        >\\n          <Tab label=\\"Dados Pessoais\\" />\\n          <Tab label=\\"Imposto de Renda\\" />\\n          <Tab label=\\"Parâmetros de Investimento\\" />\\n          <Tab label=\\"Tributação no Recebimento\\" />\\n          <Tab label=\\"Projeção Mensal\\" />\\n          <Tab label=\\"Resultados na Aposentadoria\\" />\\n          {/* Tab disabled but code preserved */}\\n          {/* <Tab label=\\"Resumo Comparativo\\" /> */}\\n        </Tabs>\\n\\n        {/* Aba de Dados Pessoais */}\\n        {tabValue === 0 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Nome Completo\\"\\n                  name=\\"nome\\"\\n                  value={dadosPessoais.nome}\\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDadosPessoais({...dadosPessoais, nome: e.target.value})}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  sx={{ mb: 3 }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Data de Nascimento\\"\\n                  name=\\"dataNascimento\\"\\n                  type=\\"date\\"\\n                  value={dadosPessoais.dataNascimento}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputLabelProps={{ shrink: true }}\\n                />\\n                <Typography variant=\\"caption\\" color=\\"textSecondary\\" sx={{ mt: 1, display: \'block\' }}>\\n                  Idade atual: {calcularIdade(dadosPessoais.dataNascimento)} anos\\n                </Typography>\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Idade de Aposentadoria\\"\\n                  name=\\"idadeAposentadoria\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.idadeAposentadoria}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: calcularIdade(dadosPessoais.dataNascimento) + 1, max: 100 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Salário Mensal Atual (R$)\\"\\n                  name=\\"salarioMensal\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.salarioMensal}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Correção Salarial Anual (%)\\"\\n                  name=\\"taxaCorrecaoSalarial\\"\\n                  type=\\"number\\"\\n                  value={dadosPessoais.taxaCorrecaoSalarial}\\n                  onChange={handleDadosPessoaisChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Aposentadoria RPPS\\n                  </Typography>\\n                  <FormControlLabel\\n                    control={\\n                      <Switch\\n                        name=\\"aposentadoriaIntegral\\"\\n                        checked={dadosPessoais.aposentadoriaIntegral}\\n                        onChange={handleDadosPessoaisChange}\\n                        color=\\"primary\\"\\n                      />\\n                    }\\n                    label=\\"Aposentadoria RPPS Integral\\"\\n                  />\\n                  {!dadosPessoais.aposentadoriaIntegral && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor Mensal Aposentadoria Proporcional (R$)\\"\\n                      name=\\"valorAposentadoriaProporcional\\"\\n                      type=\\"number\\"\\n                      value={dadosPessoais.valorAposentadoriaProporcional}\\n                      onChange={handleDadosPessoaisChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n        \\n        {/* Nova Aba de Imposto de Renda */}\\n        {tabValue === 1 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Dados para Cálculo do Imposto de Renda\\n            </Typography>\\n            \\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outras Rendas Mensais Atuais (R$)\\"\\n                  name=\\"outrasRendas\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrasRendas}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Outros Descontos Mensais (R$)\\"\\n                  name=\\"outrosDescontos\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.outrosDescontos}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Contribuição Previdência Oficial (%)\\"\\n                  name=\\"previdenciaOficial\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.previdenciaOficial}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ \\n                    inputProps: { min: 0, max: 100, step: 0.1 },\\n                    endAdornment: <span>%</span>\\n                  }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Número de Dependentes\\"\\n                  name=\\"dependentes\\"\\n                  type=\\"number\\"\\n                  value={dadosImpostoRenda.dependentes}\\n                  onChange={handleDadosImpostoRendaChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 10 } }}\\n                />\\n              </Grid>\\n            </Grid>\\n            \\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\">Alíquotas de IR na Tabela Progressiva</Typography>\\n              <TableContainer component={Paper} sx={{ mt: 2 }}>\\n                <Table size=\\"small\\">\\n                  <TableHead>\\n                    <TableRow>\\n                      <TableCell>Base de Cálculo Anual (R$)</TableCell>\\n                      <TableCell>Alíquota (%)</TableCell>\\n                      <TableCell>Parcela a Deduzir (R$)</TableCell>\\n                    </TableRow>\\n                  </TableHead>\\n                  <TableBody>\\n                    <TableRow>\\n                      <TableCell>Até 22.847,76</TableCell>\\n                      <TableCell>0</TableCell>\\n                      <TableCell>0</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 22.847,77 até 33.919,80</TableCell>\\n                      <TableCell>7,5</TableCell>\\n                      <TableCell>1.713,58</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 33.919,81 até 45.012,60</TableCell>\\n                      <TableCell>15</TableCell>\\n                      <TableCell>4.257,57</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>De 45.012,61 até 55.976,16</TableCell>\\n                      <TableCell>22,5</TableCell>\\n                      <TableCell>7.633,51</TableCell>\\n                    </TableRow>\\n                    <TableRow>\\n                      <TableCell>Acima de 55.976,16</TableCell>\\n                      <TableCell>27,5</TableCell>\\n                      <TableCell>10.432,32</TableCell>\\n                    </TableRow>\\n                  </TableBody>\\n                </Table>\\n              </TableContainer>\\n            </Box>\\n            \\n            <Box sx={{ mt: 4, p: 2, bgcolor: \'#f8f9fa\', borderRadius: 1 }}>\\n              <Typography variant=\\"subtitle1\\" gutterBottom fontWeight=\\"bold\\">\\n                Sua Situação Atual\\n              </Typography>\\n              <Typography>\\n                Renda Anual: {formatCurrency((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Dedução por Dependentes: {formatCurrency(dadosImpostoRenda.dependentes * 2275.08)}\\n              </Typography>\\n              <Typography>\\n                Dedução Previdência Oficial: {formatCurrency((dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12)}\\n              </Typography>\\n              <Typography>\\n                Outros Descontos: {formatCurrency(dadosImpostoRenda.outrosDescontos * 12)}\\n              </Typography>\\n              <Typography>\\n                Base de Cálculo: {formatCurrency(Math.max(0, (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.dependentes * 2275.08 - (dadosImpostoRenda.previdenciaOficial / 100) * (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12 - dadosImpostoRenda.outrosDescontos * 12))}\\n              </Typography>\\n              <Typography>\\n                Alíquota Efetiva: {formatPercent(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ) / ((dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12) * 100)}\\n              </Typography>\\n              <Typography>\\n                IR Anual Estimado: {formatCurrency(calcularIR(\\n                  (dadosPessoais.salarioMensal + dadosImpostoRenda.outrasRendas) * 12,\\n                  dadosImpostoRenda.dependentes,\\n                  dadosImpostoRenda.previdenciaOficial,\\n                  dadosImpostoRenda.outrosDescontos\\n                ))}\\n              </Typography>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Parâmetros de Investimento */}\\n        {tabValue === 2 && (\\n          <Box sx={{ p: 3 }}>\\n            <Grid container spacing={3}>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Rentabilidade Anual (%)\\"\\n                  name=\\"taxaRentabilidade\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaRentabilidade}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 20, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Taxa de Administração PGBL/VGBL (% a.a.)\\"\\n                  name=\\"taxaAdministracaoPGBL\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.taxaAdministracaoPGBL}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 5, step: 0.1 } }}\\n                />\\n              </Grid>\\n              <Grid item xs={12} sm={6}>\\n                <TextField\\n                  fullWidth\\n                  label=\\"Percentual Destinado à Parcela de Risco (%)\\"\\n                  name=\\"percentualRisco\\"\\n                  type=\\"number\\"\\n                  value={parametrosInvestimento.percentualRisco}\\n                  onChange={handleParametrosInvestimentoChange}\\n                  margin=\\"normal\\"\\n                  variant=\\"outlined\\"\\n                  InputProps={{ inputProps: { min: 0, max: 50, step: 0.1 } }}\\n                />\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom>\\n                    Estratégia de Investimento\\n                  </Typography>\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mb: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"investirSempre12Porcento\\"\\n                          checked={parametrosInvestimento.investirSempre12Porcento}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Investir sempre 12% da renda anual\\"\\n                    />\\n                    <Tooltip title=\\"O limite de dedução do PGBL na declaração do IR é de 12% da renda tributável anual\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                  \\n                  {!parametrosInvestimento.investirSempre12Porcento && (\\n                    <TextField\\n                      fullWidth\\n                      label=\\"Valor de Investimento Anual (R$)\\"\\n                      name=\\"valorInvestimentoAnual\\"\\n                      type=\\"number\\"\\n                      value={parametrosInvestimento.valorInvestimentoAnual}\\n                      onChange={handleParametrosInvestimentoChange}\\n                      margin=\\"normal\\"\\n                      variant=\\"outlined\\"\\n                      InputProps={{ inputProps: { min: 0 } }}\\n                    />\\n                  )}\\n                  \\n                  <Box sx={{ display: \'flex\', alignItems: \'center\', mt: 2 }}>\\n                    <FormControlLabel\\n                      control={\\n                        <Switch\\n                          name=\\"reinvestirGanhosIR\\"\\n                          checked={parametrosInvestimento.reinvestirGanhosIR}\\n                          onChange={handleParametrosInvestimentoChange}\\n                          color=\\"primary\\"\\n                        />\\n                      }\\n                      label=\\"Reinvestir ganhos com desconto na declaração de IR\\"\\n                    />\\n                    <Tooltip title=\\"A economia de IR obtida com o PGBL será reinvestida em um fundo VGBL\\">\\n                      <HelpOutlineIcon fontSize=\\"small\\" color=\\"action\\" sx={{ ml: 1 }} />\\n                    </Tooltip>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              {/* Removido o bloco de Tributação na Fase de Recebimento */}\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Nova Aba de Tributação no Recebimento */}\\n        {tabValue === 3 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Tributação no Recebimento do Benefício\\n            </Typography>\\n            \\n            <Grid container spacing={4}>\\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    PGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No PGBL, o Imposto de Renda incide sobre a <strong>totalidade do benefício</strong> recebido, \\n                    incluindo tanto o capital investido quanto os rendimentos.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você receber R$ 5.000,00 mensais de um plano PGBL, \\n                    o IR incidirá sobre o valor total de R$ 5.000,00.\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no PGBL você já obteve benefício fiscal no momento da contribuição, \\n                    deduzindo os valores investidos da base de cálculo do IR.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    VGBL - Tributação\\n                  </Typography>\\n                  <Typography paragraph>\\n                    No VGBL, o Imposto de Renda incide <strong>apenas sobre os rendimentos</strong>, \\n                    não sobre o capital investido.\\n                  </Typography>\\n                  <Typography paragraph>\\n                    Por exemplo, se você investiu R$ 100.000,00 e seu saldo acumulado é de R$ 150.000,00, \\n                    o IR incidirá apenas sobre os R$ 50.000,00 de rendimentos (33,33% do valor total).\\n                  </Typography>\\n                  <Typography>\\n                    Isso ocorre porque no VGBL você não teve benefício fiscal no momento da contribuição, \\n                    tendo investido com recursos já tributados.\\n                  </Typography>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Tabela Regressiva de Imposto de Renda (Lei 11.053/2004)\\n                  </Typography>\\n                  <Typography paragraph>\\n                    A tabela regressiva, instituída pela Lei 11.053/2004, oferece alíquotas menores quanto maior for o tempo de acumulação do investimento, incentivando o investimento de longo prazo. Esta opção é especialmente vantajosa para quem planeja manter os recursos investidos por mais de 10 anos.\\n                  </Typography>\\n                  \\n                  <TableContainer>\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                          <TableCell>Prazo de Acumulação</TableCell>\\n                          <TableCell align=\\"center\\">Alíquota</TableCell>\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        <TableRow>\\n                          <TableCell>Até 2 anos</TableCell>\\n                          <TableCell align=\\"center\\">35%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 2 a 4 anos</TableCell>\\n                          <TableCell align=\\"center\\">30%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 4 a 6 anos</TableCell>\\n                          <TableCell align=\\"center\\">25%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 6 a 8 anos</TableCell>\\n                          <TableCell align=\\"center\\">20%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>De 8 a 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">15%</TableCell>\\n                        </TableRow>\\n                        <TableRow>\\n                          <TableCell>Acima de 10 anos</TableCell>\\n                          <TableCell align=\\"center\\">10%</TableCell>\\n                        </TableRow>\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                  \\n                  <Box sx={{ mt: 3 }}>\\n                    <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                      Comparativo entre Tabela Progressiva e Regressiva\\n                    </Typography>\\n                    <Typography paragraph>\\n                      <strong>Tabela Progressiva:</strong> Utiliza as mesmas alíquotas do IR convencional (0%, 7,5%, 15%, 22,5% e 27,5%), \\n                      com possibilidade de deduções. É mais vantajosa para quem tem renda mensal menor na aposentadoria.\\n                    </Typography>\\n                    <Typography>\\n                      <strong>Tabela Regressiva:</strong> Alíquotas diminuem conforme o tempo de investimento, \\n                      sem possibilidade de deduções. É mais vantajosa para investimentos de longo prazo e valores maiores.\\n                    </Typography>\\n                  </Box>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2 }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Formas de Recebimento e Impacto na Tributação\\n                  </Typography>\\n                  \\n                  <Grid container spacing={3}>\\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Parcela Única\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor total acumulado é recebido de uma só vez. \\n                          Na tabela progressiva, incidirá a alíquota de até 27,5% sobre o valor total.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, cada aporte será tributado conforme seu tempo de permanência. \\n                          Aportes mais recentes podem ser tributados com alíquotas maiores (até 35%), \\n                          enquanto os mais antigos terão alíquotas menores (mínimo de 10%).\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Paper sx={{ p: 2, bgcolor: \'#f8f9fa\', height: \'100%\' }}>\\n                        <Typography variant=\\"subtitle2\\" gutterBottom sx={{ fontWeight: \'bold\' }}>\\n                          Recebimento em Forma Diluída\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Nesta modalidade, o valor é recebido mensalmente. Na tabela progressiva, \\n                          como as mensalidades são menores, pode-se enquadrar em alíquotas inferiores a 27,5%.\\n                        </Typography>\\n                        <Typography paragraph>\\n                          Na tabela regressiva, há vantagem adicional: os aportes mais antigos são resgatados \\n                          primeiro, beneficiando-se da alíquota mínima de 10% desde o início do recebimento.\\n                        </Typography>\\n                      </Paper>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Paper sx={{ p: 3, mt: 2, bgcolor: \'#f8f9fa\' }}>\\n                  <Typography variant=\\"subtitle1\\" gutterBottom sx={{ fontWeight: \'bold\', color: \'#012B09\' }}>\\n                    Sua Situação com Base nos Parâmetros Informados\\n                  </Typography>\\n                  \\n                  <Grid container spacing={2}>\\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Regime de Tributação Selecionado:\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {parametrosInvestimento.utilizarTabelaRegressiva ? \'Tabela Regressiva\' : \'Tabela Progressiva\'}\\n                      </Typography>\\n                      \\n                      {parametrosInvestimento.utilizarTabelaRegressiva && (\\n                        <>\\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Tempo de Acumulação:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao} anos\\n                          </Typography>\\n                          \\n                          <Typography variant=\\"subtitle2\\" gutterBottom>\\n                            Alíquota Aplicável:\\n                          </Typography>\\n                          <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                            {parametrosInvestimento.tempoAcumulacao > 10 ? \'10%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 8 ? \'15%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 6 ? \'20%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 4 ? \'25%\' :\\n                             parametrosInvestimento.tempoAcumulacao > 2 ? \'30%\' : \'35%\'}\\n                          </Typography>\\n                        </>\\n                      )}\\n                    </Grid>\\n                    \\n                    <Grid item xs={12} md={6}>\\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR durante a fase de contribuição (PGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency(resumoComparativo.economiaIRPGBL)}\\n                      </Typography>\\n                      \\n                      <Typography variant=\\"subtitle2\\" gutterBottom>\\n                        Economia de IR na fase de recebimento (VGBL):\\n                      </Typography>\\n                      <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                        {formatCurrency((resultadosAposentadoria.pgbl.irMensal || 0) * 12 * 20 - (resultadosAposentadoria.vgbl.irMensal || 0) * 12 * 20)}\\n                        {\' \'}(estimativa para 20 anos de recebimento)\\n                      </Typography>\\n                    </Grid>\\n                  </Grid>\\n                </Paper>\\n              </Grid>\\n            </Grid>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Projeção Mensal */}\\n        {tabValue === 4 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom>\\n              Projeção Mensal\\n            </Typography>\\n            <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\\n              <Table stickyHeader size=\\"small\\">\\n                <TableHead>\\n                  <TableRow>\\n                    <TableCell>Ano</TableCell>\\n                    <TableCell>Mês</TableCell>\\n                    <TableCell>Idade</TableCell>\\n                    <TableCell>Salário Mensal</TableCell>\\n                    <TableCell>Contrib. PGBL</TableCell>\\n                    <TableCell>Economia IR</TableCell>\\n                    <TableCell>Valor Corrigido</TableCell>\\n                    <TableCell>Saldo PGBL</TableCell>\\n                    <TableCell>Saldo VGBL</TableCell>\\n                    {parametrosInvestimento.reinvestirGanhosIR && (\\n                      <TableCell>Saldo Reinvestido</TableCell>\\n                    )}\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  {projecaoAnual.map((row, index) => (\\n                    <TableRow key={`${row.ano}-${row.mes}-${index}`}>\\n                      <TableCell>{row.ano}</TableCell>\\n                      <TableCell>{row.mes + 1}</TableCell>\\n                      <TableCell>{row.idade}</TableCell>\\n                      <TableCell>{formatCurrency(row.salarioMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.contribuicaoPGBLMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.economiaIRMensal)}</TableCell>\\n                      <TableCell>{formatCurrency(row.valorCorrigido)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoPGBL)}</TableCell>\\n                      <TableCell>{formatCurrency(row.saldoVGBL)}</TableCell>\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <TableCell>{formatCurrency(row.saldoReinvestido)}</TableCell>\\n                      )}\\n                    </TableRow>\\n                  ))}\\n                  \\n                  {/* Linha de totais */}\\n                  <TableRow sx={{ fontWeight: \'bold\', bgcolor: \'#f8f9fa\' }}>\\n                    <TableCell colSpan={4} align=\\"right\\"><strong>TOTAIS:</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.contribuicaoPGBLMensal, 0))}</strong></TableCell>\\n                    <TableCell><strong>{formatCurrency(projecaoAnual.reduce((total, row) => total + row.economiaIRMensal, 0))}</strong></TableCell>\\n                    <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3}></TableCell>\\n                  </TableRow>\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ height: 400, mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom>\\n                Evolução do Saldo Acumulado\\n              </Typography>\\n              <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                <LineChart\\n                  data={projecaoAnual}\\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n                >\\n                  <CartesianGrid strokeDasharray=\\"3 3\\" />\\n                  <XAxis dataKey=\\"idade\\" label={{ value: \'Idade\', position: \'insideBottomRight\', offset: -10 }} />\\n                  <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n                  <RechartsTooltip formatter={(value: any) => formatCurrency(typeof value === \'number\' ? value : 0)} />\\n                  <Legend />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoPGBL\\" name=\\"Saldo PGBL\\" stroke=\\"#012B09\\" strokeWidth={2} />\\n                  <Line type=\\"monotone\\" dataKey=\\"saldoVGBL\\" name=\\"Saldo VGBL\\" stroke=\\"#82ca9d\\" strokeWidth={2} />\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <Line type=\\"monotone\\" dataKey=\\"saldoReinvestido\\" name=\\"Saldo Reinvestido\\" stroke=\\"#8884d8\\" strokeWidth={2} />\\n                  )}\\n                </LineChart>\\n              </ResponsiveContainer>\\n            </Box>\\n          </Box>\\n        )}\\n\\n        {/* Aba de Resultados na Aposentadoria */}\\n        {tabValue === 5 && (\\n          <ResultadosAposentadoria \\n            resultadosAposentadoria={resultadosAposentadoria}\\n            parametrosInvestimento={parametrosInvestimento}\\n            projecaoAnual={projecaoAnual}\\n            aposentadoriaRPPSValor={aposentadoriaRPPSValor}\\n            outrasRendasCorrigidasValor={outrasRendasCorrigidasValor}\\n            formatCurrency={formatCurrency}\\n            exportData={prepareExportData()?.resultados}\\n            monthlyResults={{\\n              pgblMonthlyContribution: contribuicaoPGBLMensalValor,\\n              pgblMonthlyIncome: resultadosAposentadoria.pgbl.rendaLiquida,\\n              vgblMonthlyIncome: resultadosAposentadoria.vgbl.rendaLiquida,\\n              taxSavingsMonthly: resumoComparativo.economiaIRPGBL / (projecaoAnual.length > 0 ? projecaoAnual.length : 1)\\n            }}\\n          />\\n        )}\\n\\n        {/* Aba de Resumo Comparativo */}\\n        {tabValue === 6 && (\\n          <Box sx={{ p: 3 }}>\\n            <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n              Resumo Comparativo PGBL vs VGBL\\n            </Typography>\\n            \\n            <TableContainer component={Paper} sx={{ mb: 4, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n              <Table>\\n                <TableHead>\\n                  <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                    <TableCell>Categoria</TableCell>\\n                    <TableCell align=\\"right\\">PGBL</TableCell>\\n                    <TableCell align=\\"right\\">VGBL</TableCell>\\n                    <TableCell align=\\"right\\">Diferença</TableCell>\\n                  </TableRow>\\n                </TableHead>\\n                <TableBody>\\n                  <TableRow>\\n                    <TableCell>Economia de IR durante contribuição</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(0)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resumoComparativo.economiaIRPGBL)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Saldo acumulado na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  </TableRow>\\n                  <TableRow>\\n                    <TableCell>Renda mensal líquida na aposentadoria</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida)}</TableCell>\\n                    <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)}</TableCell>\\n                  </TableRow>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableRow>\\n                      <TableCell>Renda adicional do reinvestimento</TableCell>\\n                      <TableCell align=\\"right\\">-</TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                      <TableCell align=\\"right\\">\\n                        {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)}\\n                      </TableCell>\\n                    </TableRow>\\n                  )}\\n                </TableBody>\\n              </Table>\\n            </TableContainer>\\n\\n            <Box sx={{ mt: 4 }}>\\n              <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n                Conclusão\\n              </Typography>\\n              <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n                <Typography>\\n                  {resultadosAposentadoria.pgbl.rendaLiquida > resultadosAposentadoria.vgbl.rendaLiquida && \\n                   (!parametrosInvestimento.reinvestirGanhosIR || \\n                    (resultadosAposentadoria.pgbl.rendaLiquida > \\n                     resultadosAposentadoria.vgbl.rendaLiquida + \\n                     (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0))) ? (\\n                    <>\\n                      Para seu perfil, o <strong>PGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquida - resultadosAposentadoria.vgbl.rendaLiquida)} \\n                      na aposentadoria, além de uma economia total de IR durante o período de contribuição \\n                      de {formatCurrency(resumoComparativo.economiaIRPGBL)}.\\n                    </>\\n                  ) : (\\n                    <>\\n                      Para seu perfil, o <strong>VGBL</strong> apresenta-se como a opção mais vantajosa,\\n                      proporcionando uma renda líquida mensal superior em {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquida - resultadosAposentadoria.pgbl.rendaLiquida)} \\n                      na aposentadoria\\n                      {parametrosInvestimento.reinvestirGanhosIR && (\\n                        <>, que pode ser ainda maior considerando a renda adicional de {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido / (20 * 12) : 0)} do reinvestimento</>\\n                      )}\\n                      , apesar da economia de IR de {formatCurrency(resumoComparativo.economiaIRPGBL)} durante o \\n                      período de contribuição oferecida pelo PGBL.\\n                    </>\\n                  )}\\n                </Typography>\\n                \\n                <Typography sx={{ mt: 2, fontWeight: \'medium\' }}>\\n                  Recomendações:\\n                </Typography>\\n                <ul>\\n                  <li>\\n                    <Typography>\\n                      {resumoComparativo.economiaIRPGBL > 0 && resultadosAposentadoria.pgbl.rendaLiquida < resultadosAposentadoria.vgbl.rendaLiquida ? (\\n                        <>\\n                          Considere investir a economia de IR do PGBL em investimentos complementares \\n                          para potencializar seu patrimônio.\\n                        </>\\n                      ) : (\\n                        <>\\n                          Continue acompanhando a evolução dos seus investimentos e reavalie sua \\n                          estratégia previdenciária anualmente.\\n                        </>\\n                      )}\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Diversifique seus investimentos para além da previdência privada, \\n                      considerando opções como Tesouro Direto, fundos de investimento e ações.\\n                    </Typography>\\n                  </li>\\n                  <li>\\n                    <Typography>\\n                      Consulte um especialista em direito previdenciário para avaliar as melhores estratégias \\n                      para sua aposentadoria, considerando também os benefícios do INSS e outros regimes.\\n                    </Typography>\\n                  </li>\\n                </ul>\\n              </Paper>\\n              \\n              <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 4, gap: 2 }}>\\n                <Button\\n                  variant=\\"contained\\"\\n                  color=\\"primary\\"\\n                  onClick={gerarRelatorioPDF}\\n                  startIcon={<SaveIcon />}\\n                  sx={{ \\n                    py: 1.5, \\n                    px: 4, \\n                    backgroundColor: \'#012B09\',\\n                    \'&:hover\': {\\n                      backgroundColor: \'#01461E\',\\n                    },\\n                    borderRadius: \'8px\',\\n                    fontWeight: \'bold\'\\n                  }}\\n                >\\n                  Gerar Relatório PDF\\n                </Button>\\n              </Box>\\n            </Box>\\n          </Box>\\n        )}\\n      </Paper>\\n\\n      <Box sx={{ display: \'flex\', justifyContent: \'center\', mt: 3, mb: 5 }}>\\n        <Button \\n          variant=\\"contained\\" \\n          color=\\"primary\\" \\n          onClick={handleRecalcular}\\n          disabled={isCalculating}\\n          sx={{ \\n            py: 1.5, \\n            px: 4, \\n            backgroundColor: \'#012B09\',\\n            \'&:hover\': {\\n              backgroundColor: \'#01461E\',\\n            },\\n            borderRadius: \'8px\',\\n            fontWeight: \'bold\'\\n          }}\\n        >\\n          {isCalculating ? (\\n            <>\\n              <CircularProgress size={24} color=\\"inherit\\" sx={{ mr: 1 }} />\\n              Calculando...\\n            </>\\n          ) : \'Recalcular\'}\\n        </Button>\\n      </Box>\\n      \\n      <Snackbar \\n        open={showFeedback} \\n        autoHideDuration={3000} \\n        onClose={() => setShowFeedback(false)}\\n        anchorOrigin={{ vertical: \'bottom\', horizontal: \'center\' }}\\n      >\\n        <Alert severity=\\"success\\" sx={{ width: \'100%\' }}>\\n          Cálculos atualizados com sucesso!\\n        </Alert>\\n      </Snackbar>\\n    </Container>\\n  );\\n};\\n\\n\\n// Set default props\\nPrevCalculator.defaultProps = {\\n  onDataExport: undefined\\n};\\nexport default PrevCalculator;\\n"}', 'tool_use_id': 'toolu_018xZ96p8SCTyhUiyR3aCeVU', 'is_error': False}]}, {'role': 'assistant', 'content': [{'text': 'Let me examine the related files to understand how the PrevCalculator component is used:', 'type': 'text'}, {'type': 'tool_use', 'name': 'read_file_tool', 'input': {'filepath': 'src/components/PrevCalculator/ResultadosAposentadoria.tsx'}, 'id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84'}]}, {'role': 'user', 'content': [{'type': 'tool_result', 'content': '{"content": "import React from \'react\';\\nimport Box from \'@mui/material/Box\';\\nimport Grid from \'@mui/material/Grid\';\\nimport Paper from \'@mui/material/Paper\';\\nimport Table from \'@mui/material/Table\';\\nimport TableBody from \'@mui/material/TableBody\';\\nimport TableCell from \'@mui/material/TableCell\';\\nimport TableContainer from \'@mui/material/TableContainer\';\\nimport TableHead from \'@mui/material/TableHead\';\\nimport TableRow from \'@mui/material/TableRow\';\\nimport Typography from \'@mui/material/Typography\';\\nimport { \\n  BarChart, \\n  Bar, \\n  XAxis, \\n  YAxis, \\n  CartesianGrid, \\n  Tooltip as RechartsTooltip, \\n  ResponsiveContainer,\\n  PieChart,\\n  Pie,\\n  Cell,\\n  Legend\\n} from \'recharts\';\\n\\n// Interfaces for typing\\ninterface ResultadoPlano {\\n  saldo: number;\\n  rendaMensal: number;\\n  rendaTotalMensal?: number;\\n  irMensal?: number;\\n  rendaLiquida: number;\\n  baseCalculoIR: number;\\n  aliquotaEfetivaIR: number;\\n  economiaIRMensal?: number;\\n  \\n  // Additional scenarios\\n  rendaLiquidaProgressivaUnica: number;\\n  rendaLiquidaRegressivaUnica: number;\\n  rendaLiquidaProgressivaDiluida: number;\\n  rendaLiquidaRegressivaDiluida: number;\\n}\\n\\ninterface ResultadosAposentadoriaData {\\n  pgbl: ResultadoPlano;\\n  vgbl: ResultadoPlano;\\n}\\n\\ninterface ParametrosInvestimento {\\n  reinvestirGanhosIR: boolean;\\n  utilizarTabelaRegressiva: boolean;\\n  tempoAcumulacao: number;\\n  receberParcelaUnica: boolean;\\n}\\n\\ninterface ProjecaoAnual {\\n  saldoReinvestido: number;\\n  contribuicaoPGBLMensal: number;\\n  contribuicaoLiquidaPGBL: number;\\n}\\n\\ninterface ResultadosAposentadoriaProps {\\n  resultadosAposentadoria: ResultadosAposentadoriaData;\\n  parametrosInvestimento: ParametrosInvestimento;\\n  projecaoAnual: ProjecaoAnual[];\\n  aposentadoriaRPPSValor: number;\\n  outrasRendasCorrigidasValor: number;\\n  formatCurrency: (value: number) => string;\\n  exportData?: {\\n    saldoPGBL: number;\\n    contribuicaoPGBL: number;\\n    contribuicaoPGBLMensal: number;\\n    saldoVGBL: number;\\n    saldoReinvestido?: number;\\n    rendaLiquidaPGBL: number;\\n    rendaLiquidaVGBL: number;\\n    economiaIRTotal: number;\\n    recomendacao: string;\\n  };\\n  monthlyResults?: {\\n    pgblMonthlyContribution: number;\\n    pgblMonthlyIncome: number;\\n    vgblMonthlyIncome: number;\\n    taxSavingsMonthly: number;\\n  };\\n}\\n\\n\\n\\nconst calcularIR = (baseCalculo: number, dependentes: number = 0, previdenciaOficial: number = 0, outrosDescontos: number = 0): number => {\\n  // Dedução por dependente: R$ 189,59 por mês ou R$ 2.275,08 por ano\\n  const deducaoDependentes = dependentes * 2275.08;\\n  \\n  // Dedução da previdência oficial e outros descontos\\n  const deducaoPrevidencia = previdenciaOficial * 12;\\n  const deducaoOutros = outrosDescontos * 12;\\n  \\n  // Base de cálculo após deduções\\n  const baseCalculoAposDeducoes = Math.max(0, baseCalculo - deducaoDependentes - deducaoPrevidencia - deducaoOutros);\\n  \\n  if (baseCalculoAposDeducoes <= 22847.76) return 0;\\n  if (baseCalculoAposDeducoes <= 33919.80) return baseCalculoAposDeducoes * 0.075 - 1713.58;\\n  if (baseCalculoAposDeducoes <= 45012.60) return baseCalculoAposDeducoes * 0.15 - 4257.57;\\n  if (baseCalculoAposDeducoes <= 55976.16) return baseCalculoAposDeducoes * 0.225 - 7633.51;\\n  return baseCalculoAposDeducoes * 0.275 - 10432.32;\\n};\\n\\n\\nconst ResultadosAposentadoria: React.FC<ResultadosAposentadoriaProps> = ({\\n  resultadosAposentadoria,\\n  parametrosInvestimento,\\n  projecaoAnual,\\n  aposentadoriaRPPSValor,\\n  outrasRendasCorrigidasValor,\\n  formatCurrency,\\n  exportData,\\n  monthlyResults\\n}) => {\\n  // Log the exported data if available\\n  React.useEffect(() => {\\n    if (exportData) {\\n      console.log(\'Dados exportados recebidos:\', exportData);\\n    }\\n  }, [exportData]);\\n  // Calcular breakdown para IR progressivo do PGBL\\n  const calcularIRProgressivoBreakdown = (baseCalculo: number) => {\\n    const breakdown = [\\n      { faixa: \'Isenta\', valor: 0, aliquota: 0 },\\n      { faixa: \'7,5%\', valor: 0, aliquota: 7.5 },\\n      { faixa: \'15%\', valor: 0, aliquota: 15 },\\n      { faixa: \'22,5%\', valor: 0, aliquota: 22.5 },\\n      { faixa: \'27,5%\', valor: 0, aliquota: 27.5 }\\n    ];\\n    \\n    let saldoRestante = baseCalculo;\\n    \\n    // Faixa isenta\\n    const faixaIsenta = Math.min(22847.76, saldoRestante);\\n    breakdown[0].valor = faixaIsenta;\\n    saldoRestante -= faixaIsenta;\\n    \\n    // Faixa 7,5%\\n    if (saldoRestante > 0) {\\n      const faixa7_5 = Math.min(33919.80 - 22847.76, saldoRestante);\\n      breakdown[1].valor = faixa7_5;\\n      saldoRestante -= faixa7_5;\\n    }\\n    \\n    // Faixa 15%\\n    if (saldoRestante > 0) {\\n      const faixa15 = Math.min(45012.60 - 33919.80, saldoRestante);\\n      breakdown[2].valor = faixa15;\\n      saldoRestante -= faixa15;\\n    }\\n    \\n    // Faixa 22,5%\\n    if (saldoRestante > 0) {\\n      const faixa22_5 = Math.min(55976.16 - 45012.60, saldoRestante);\\n      breakdown[3].valor = faixa22_5;\\n      saldoRestante -= faixa22_5;\\n    }\\n    \\n    // Faixa 27,5%\\n    if (saldoRestante > 0) {\\n      breakdown[4].valor = saldoRestante;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular breakdown para IR regressivo do PGBL\\n  const calcularIRRegressivoBreakdown = (valor: number, tempoAcumulacao: number) => {\\n    let aliquota = 35;\\n    if (tempoAcumulacao > 10) aliquota = 10;\\n    else if (tempoAcumulacao > 8) aliquota = 15;\\n    else if (tempoAcumulacao > 6) aliquota = 20;\\n    else if (tempoAcumulacao > 4) aliquota = 25;\\n    else if (tempoAcumulacao > 2) aliquota = 30;\\n    \\n    const breakdown = [\\n      { faixa: \'Até 2 anos (35%)\', valor: 0, aliquota: 35 },\\n      { faixa: \'2-4 anos (30%)\', valor: 0, aliquota: 30 },\\n      { faixa: \'4-6 anos (25%)\', valor: 0, aliquota: 25 },\\n      { faixa: \'6-8 anos (20%)\', valor: 0, aliquota: 20 },\\n      { faixa: \'8-10 anos (15%)\', valor: 0, aliquota: 15 },\\n      { faixa: \'Acima 10 anos (10%)\', valor: 0, aliquota: 10 }\\n    ];\\n    \\n    // Colocar todo o valor na faixa correspondente\\n    const index = 6 - ((aliquota / 5) - 1);\\n    if (index >= 0 && index < breakdown.length) {\\n      breakdown[index].valor = valor;\\n    }\\n    \\n    return breakdown;\\n  };\\n  \\n  // Calcular os valores para breakdowns\\n  const pgblProgressivoBreakdown = calcularIRProgressivoBreakdown(resultadosAposentadoria.pgbl.baseCalculoIR);\\n  \\n  // Calcular o valor tributável do VGBL (apenas o rendimento)\\n  const valorTributavelVGBL = resultadosAposentadoria.vgbl.baseCalculoIR - aposentadoriaRPPSValor * 12 - outrasRendasCorrigidasValor * 12;\\n  const vgblProgressivoBreakdown = calcularIRProgressivoBreakdown(valorTributavelVGBL);\\n  \\n  // Calcular breakdowns regressivos\\n  const pgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    resultadosAposentadoria.pgbl.saldo, \\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n  \\n  // Para VGBL, apenas o rendimento é tributado\\n  const totalInvestido = projecaoAnual.reduce((total, ano) => total + ano.contribuicaoLiquidaPGBL, 0);\\n  const rendimentoVGBL = resultadosAposentadoria.vgbl.saldo - totalInvestido;\\n  \\n  const vgblRegressivoBreakdown = calcularIRRegressivoBreakdown(\\n    rendimentoVGBL,\\n    parametrosInvestimento.tempoAcumulacao\\n  );\\n\\n  return (\\n    <Box sx={{ p: 3 }}>\\n      <Grid container spacing={4}>\\n        <Grid item xs={12} md={6}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Saldo Acumulado na Aposentadoria\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\' }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Plano</TableCell>\\n                  <TableCell align=\\"right\\">Valor</TableCell>\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>PGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                </TableRow>\\n                {parametrosInvestimento.reinvestirGanhosIR && (\\n                  <TableRow>\\n                    <TableCell sx={{ pl: 4 }}>Saldo Reinvestido PGBL</TableCell>\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  </TableRow>\\n                )}\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Total PGBL</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.saldo + \\n                      (parametrosInvestimento.reinvestirGanhosIR && projecaoAnual.length > 0 ? \\n                        projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0))}\\n                  </strong></TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>VGBL</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.vgbl.saldo)}</TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Capital Investido VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(totalInvestido)}\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell sx={{ pl: 4 }}>Rendimento Tributável VGBL</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n        </Grid>\\n\\n        <Grid item xs={12}>\\n          <Typography variant=\\"h6\\" sx={{ color: \'#012B09\', fontWeight: \'medium\', mb: 2 }}>\\n            Cenários de Tributação na Aposentadoria\\n          </Typography>\\n          \\n          {/* Parcela Única - Progressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Progressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(rendimentoVGBL)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(rendimentoVGBL).toFixed(2)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação progressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa Isenta (0%)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 7,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 22,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 27,5%</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblProgressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Progressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Progressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblProgressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblProgressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n          \\n          {/* Parcela Única - Regressiva */}\\n          <Typography variant=\\"subtitle1\\" sx={{ mt: 3, mb: 1, fontWeight: \'medium\' }}>\\n            Parcela Única - Regressiva\\n          </Typography>\\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: \'0 2px 8px rgba(0,0,0,0.1)\', mb: 4 }}>\\n            <Table>\\n              <TableHead>\\n                <TableRow sx={{ bgcolor: \'#E9EDE5\' }}>\\n                  <TableCell>Detalhe</TableCell>\\n                  <TableCell align=\\"right\\">PGBL</TableCell>\\n                  <TableCell align=\\"right\\">VGBL</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">Capital Reinvestido</TableCell>\\n                  )}\\n                </TableRow>\\n              </TableHead>\\n              <TableBody>\\n                <TableRow>\\n                  <TableCell>Valor Total</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(resultadosAposentadoria.pgbl.saldo)}</TableCell>\\n                  <TableCell align=\\"right\\">{formatCurrency(rendimentoVGBL)}</TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>IR Total</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {calcularIR(resultadosAposentadoria.pgbl.saldo).toFixed(2)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {(calcularIR(rendimentoVGBL).toFixed(2))} \\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                {/* Faixas de tributação regressiva */}\\n                <TableRow>\\n                  <TableCell colSpan={parametrosInvestimento.reinvestirGanhosIR ? 4 : 3} sx={{ fontWeight: \'bold\', bgcolor: \'#f5f5f5\' }}>\\n                    Detalhamento por Faixa de Tributação\\n                  </TableCell>\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 35% (até 2 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[0].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 30% (2-4 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[1].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 25% (4-6 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[2].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 20% (6-8 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[3].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 15% (8-10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[4].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow>\\n                  <TableCell>Faixa 10% (acima de 10 anos)</TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(pgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  <TableCell align=\\"right\\">\\n                    {formatCurrency(vgblRegressivoBreakdown[5].valor)}\\n                  </TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\">-</TableCell>\\n                  )}\\n                </TableRow>\\n                <TableRow sx={{ bgcolor: \'#f8f9fa\' }}>\\n                  <TableCell><strong>Valor Líquido (após IR)</strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  <TableCell align=\\"right\\"><strong>\\n                    {formatCurrency(resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica)}\\n                  </strong></TableCell>\\n                  {parametrosInvestimento.reinvestirGanhosIR && (\\n                    <TableCell align=\\"right\\"><strong>\\n                      {formatCurrency(projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0)}\\n                    </strong></TableCell>\\n                  )}\\n                </TableRow>\\n              </TableBody>\\n            </Table>\\n          </TableContainer>\\n          \\n          {/* Gráficos de Pizza para Regressiva */}\\n          <Grid container spacing={3} sx={{ mb: 4 }}>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - PGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={pgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {pgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n<RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n            <Grid item xs={12} md={6}>\\n              <Typography variant=\\"subtitle2\\" align=\\"center\\" sx={{ mb: 2 }}>\\n                Distribuição do IR Regressivo - VGBL\\n              </Typography>\\n              <Box sx={{ height: 300 }}>\\n                <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n                  <PieChart>\\n                    <Pie\\n                      data={vgblRegressivoBreakdown.filter(item => item.valor > 0)}\\n                      cx=\\"50%\\"\\n                      cy=\\"50%\\"\\n                      labelLine={false}\\n                      label={({ faixa, percent }) => `${faixa}: ${(percent * 100).toFixed(0)}%`}\\n                      outerRadius={80}\\n                      fill=\\"#8884d8\\"\\n                      dataKey=\\"valor\\"\\n                    >\\n                      {vgblRegressivoBreakdown.map((entry, index) => (\\n                        <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\\n                      ))}\\n                    </Pie>\\n                    <Legend />\\n                    <RechartsTooltip \\n                      formatter={(value: any, name: any, props: any) => {\\n                        if (!props || !props.payload) return [formatCurrency(value), \\"\\"];\\n                        const item = props.payload;\\n                        return [`${formatCurrency(value)} (${item.aliquota}%)`, item.faixa];\\n                      }}\\n                    />\\n                  </PieChart>\\n                </ResponsiveContainer>\\n              </Box>\\n            </Grid>\\n          </Grid>\\n        </Grid>\\n      </Grid>\\n      \\n      <Box sx={{ height: 400, mt: 4 }}>\\n        <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n          Comparativo de Valor Líquido Total na Aposentadoria\\n        </Typography>\\n        <ResponsiveContainer width=\\"100%\\" height=\\"100%\\">\\n          <BarChart\\n            data={[\\n              { \\n                name: \'PGBL - Progressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'PGBL - Regressiva\', \\n                valor: resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.pgbl.saldo,\\n                ir: resultadosAposentadoria.pgbl.saldo - resultadosAposentadoria.pgbl.rendaLiquidaRegressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Progressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaProgressivaUnica\\n              },\\n              { \\n                name: \'VGBL - Regressiva\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica,\\n                valorBruto: resultadosAposentadoria.vgbl.saldo,\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              },\\n              ...(parametrosInvestimento.reinvestirGanhosIR ? [{ \\n                name: \'VGBL + Reinvestimento\', \\n                valor: resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                valorBruto: resultadosAposentadoria.vgbl.saldo + \\n                  (projecaoAnual.length > 0 ? projecaoAnual[projecaoAnual.length - 1].saldoReinvestido : 0),\\n                ir: resultadosAposentadoria.vgbl.saldo - resultadosAposentadoria.vgbl.rendaLiquidaRegressivaUnica\\n              }] : [])\\n            ]}\\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\\n          >\\n            <CartesianGrid strokeDasharray=\\"3 3\\" />\\n            <XAxis dataKey=\\"name\\" />\\n            <YAxis tickFormatter={(value) => `R$ ${value.toLocaleString()}`} />\\n            <RechartsTooltip \\n              formatter={(value: any, name: any) => {\\n                if (name === \\"valor\\") return [\\"Valor Líquido: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"valorBruto\\") return [\\"Valor Bruto: \\" + formatCurrency(value), \\"\\"];\\n                if (name === \\"ir\\") return [\\"IR: \\" + formatCurrency(value), \\"\\"];\\n                return [formatCurrency(value), name];\\n              }}\\n            />\\n            <Legend />\\n            <Bar dataKey=\\"valor\\" name=\\"Valor Líquido\\" fill=\\"#012B09\\" />\\n            <Bar dataKey=\\"ir\\" name=\\"Imposto de Renda\\" fill=\\"#d32f2f\\" />\\n          </BarChart>\\n        </ResponsiveContainer>\\n      </Box>\\n\\n      {/* Seção para exibir os dados exportados */}\\n      {exportData && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Dados Exportados para Análise\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBLMensal)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.contribuicaoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoPGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaPGBL)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Saldo VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.saldoVGBL)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Líquida VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.rendaLiquidaVGBL)}\\n                </Typography>\\n                \\n                {exportData.saldoReinvestido !== undefined && (\\n                  <>\\n                    <Typography variant=\\"subtitle2\\" gutterBottom>\\n                      Saldo Reinvestido:\\n                    </Typography>\\n                    <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                      {formatCurrency(exportData.saldoReinvestido)}\\n                    </Typography>\\n                  </>\\n                )}\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Total:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(exportData.economiaIRTotal)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Recomendação:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: \'#012B09\' }}>\\n                  {exportData.recomendacao}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n      \\n      {/* Seção para exibir os resultados mensais */}\\n      {monthlyResults && (\\n        <Box sx={{ mt: 4 }}>\\n          <Typography variant=\\"h6\\" gutterBottom sx={{ color: \'#012B09\', fontWeight: \'medium\' }}>\\n            Resultados Mensais\\n          </Typography>\\n          <Paper sx={{ p: 3, bgcolor: \'#f8f9fa\', borderRadius: \'8px\', boxShadow: \'0 2px 8px rgba(0,0,0,0.05)\' }}>\\n            <Grid container spacing={2}>\\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Contribuição PGBL Mensal:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyContribution)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal PGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.pgblMonthlyIncome)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12} md={6}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Renda Mensal VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.vgblMonthlyIncome)}\\n                </Typography>\\n                \\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Economia IR Mensal (média):\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\' }}>\\n                  {formatCurrency(monthlyResults.taxSavingsMonthly)}\\n                </Typography>\\n              </Grid>\\n              \\n              <Grid item xs={12}>\\n                <Typography variant=\\"subtitle2\\" gutterBottom>\\n                  Diferença Mensal PGBL vs VGBL:\\n                </Typography>\\n                <Typography paragraph sx={{ fontWeight: \'medium\', color: monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \'#4caf50\' : \'#f44336\' }}>\\n                  {formatCurrency(Math.abs(monthlyResults.pgblMonthlyIncome - monthlyResults.vgblMonthlyIncome))} \\n                  {monthlyResults.pgblMonthlyIncome > monthlyResults.vgblMonthlyIncome ? \' a favor do PGBL\' : \' a favor do VGBL\'}\\n                </Typography>\\n              </Grid>\\n            </Grid>\\n          </Paper>\\n        </Box>\\n      )}\\n    </Box>\\n  );\\n};\\n\\nexport default ResultadosAposentadoria;\\n"}', 'tool_use_id': 'toolu_0112ECuhBKWEhMoXdV5Tuq84', 'is_error': False}]}], 'model': 'claude-3-7-sonnet-20250219', 'temperature': 1.0, 'thinking': {'type': 'enabled', 'budget_tokens': 12000}, 'tools': [{'name': 'emit_key_snippet', 'description': 'Store a single source code snippet in the database which represents key information.\n    Automatically adds the filepath of the snippet to related files.\n\n    This is for **existing**, or **just-written** files, not for things to be created in the future.\n\n    ONLY emit snippets if they will be relevant to UPCOMING work.\n\n    Focus on external interfaces and things that are very specific and relevant to UPCOMING work.\n\n    SNIPPETS SHOULD TYPICALLY BE MULTIPLE LINES, NOT SINGLE LINES, NOT ENTIRE FILES.\n\n    Args:\n        snippet_info: Dict with keys:\n                 - filepath: Path to the source file\n                 - line_number: Line number where the snippet starts\n                 - snippet: The source code snippet text\n                 - description: Optional description of the significance', 'input_schema': {'properties': {'snippet_info': {'properties': {'filepath': {'type': 'string'}, 'line_number': {'type': 'integer'}, 'snippet': {'type': 'string'}, 'description': {'anyOf': [{'type': 'string'}, {'type': 'null'}]}}, 'required': ['filepath', 'line_number', 'snippet', 'description'], 'type': 'object'}}, 'required': ['snippet_info'], 'type': 'object'}}, {'name': 'emit_related_files', 'description': 'Store multiple related files that tools should work with.\n\n    Args:\n        files: List of file paths to add', 'input_schema': {'properties': {'files': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['files'], 'type': 'object'}}, {'name': 'emit_key_facts', 'description': 'Store multiple key facts about the project or current task in global memory.\n\n    Args:\n        facts: List of key facts to store', 'input_schema': {'properties': {'facts': {'items': {'type': 'string'}, 'type': 'array'}}, 'required': ['facts'], 'type': 'object'}}, {'name': 'list_directory_tree', 'description': 'List directory contents in a tree format with optional metadata.\n    If a file path is provided, returns information about just that file.\n\n    Args:\n        path: Directory or file path to list\n        max_depth: Maximum depth to traverse (default: 1 for no recursion)\n        follow_links: Whether to follow symbolic links\n        show_size: Show file sizes (default: False)\n        show_modified: Show last modified times (default: False)\n        exclude_patterns: List of patterns to exclude (uses gitignore syntax)\n\n    Returns:\n        Rendered tree string', 'input_schema': {'properties': {'path': {'default': '.', 'type': 'string'}, 'max_depth': {'default': 1, 'type': 'integer'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'show_size': {'default': False, 'type': 'boolean'}, 'show_modified': {'default': False, 'type': 'boolean'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}}, 'type': 'object'}}, {'name': 'read_file_tool', 'description': 'Read and return the contents of a text file.\n\n    Args:\n        filepath: Path to the file to read\n        encoding: File encoding to use (default: utf-8)\n\n    DO NOT ATTEMPT TO READ BINARY FILES', 'input_schema': {'properties': {'filepath': {'type': 'string'}, 'encoding': {'default': 'utf-8', 'type': 'string'}}, 'required': ['filepath'], 'type': 'object'}}, {'name': 'fuzzy_find_project_files', 'description': "Fuzzy find files in a project matching the search term.\n\n    This tool searches for files within a project directory using fuzzy string matching,\n    allowing for approximate matches to the search term. It returns a list of matched\n    files along with their match scores. Works with both git and non-git repositories.\n\n    Args:\n        search_term: String to match against file paths\n        repo_path: Path to project directory (defaults to current directory)\n        threshold: Minimum similarity score (0-100) for matches (default: 60)\n        max_results: Maximum number of results to return (default: 10)\n        include_paths: Optional list of path patterns to include in search\n        exclude_patterns: Optional list of path patterns to exclude from search\n        include_hidden: Whether to include hidden files in search (default: False)\n\n    Returns:\n        List of tuples containing (file_path, match_score)\n\n    Raises:\n        ValueError: If threshold is not between 0 and 100\n        FileListerError: If there's an error accessing or listing files", 'input_schema': {'properties': {'search_term': {'type': 'string'}, 'repo_path': {'default': '.', 'type': 'string'}, 'threshold': {'default': 60, 'type': 'integer'}, 'max_results': {'default': 10, 'type': 'integer'}, 'include_paths': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'exclude_patterns': {'default': None, 'items': {'type': 'string'}, 'type': 'array'}, 'include_hidden': {'default': False, 'type': 'boolean'}}, 'required': ['search_term'], 'type': 'object'}}, {'name': 'ripgrep_search', 'description': "Execute a ripgrep (rg) search with formatting and common options.\n\n    Prefer to use this with after_context_lines and/or before_context_lines over reading entire file contents, to conserve tokens and resources.\n\n    Args:\n        pattern: Search pattern to find\n        before_context_lines: Number of lines to show before each match (default: None)\n        after_context_lines: Number of lines to show after each match (default: None)\n        file_type: Optional file type to filter results (e.g. 'py' for Python files)\n        case_sensitive: Whether to do case-sensitive search (default: True)\n        include_hidden: Whether to search hidden files and directories (default: False)\n        follow_links: Whether to follow symbolic links (default: False)\n        exclude_dirs: Additional directories to exclude (combines with defaults)\n        include_paths: Optional list of specific file or directory paths to search within.\n                       If provided, rg will only search these paths.\n        fixed_string: Whether to treat pattern as a literal string instead of regex (default: False)", 'input_schema': {'properties': {'pattern': {'type': 'string'}, 'before_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'after_context_lines': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}, 'file_type': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'case_sensitive': {'default': True, 'type': 'boolean'}, 'include_hidden': {'default': False, 'type': 'boolean'}, 'follow_links': {'default': False, 'type': 'boolean'}, 'exclude_dirs': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'include_paths': {'anyOf': [{'items': {'type': 'string'}, 'type': 'array'}, {'type': 'null'}], 'default': None}, 'fixed_string': {'default': False, 'type': 'boolean'}}, 'required': ['pattern'], 'type': 'object'}}, {'name': 'run_shell_command', 'description': "Execute a shell command and return its output.\n\n    Args:\n        command: The shell command to execute. Keep it to 300 words or less.\n        timeout: Expected runtime in seconds, defaults to 30.\n            If process exceeds 2x this value, it will be terminated gracefully.\n            If process exceeds 3x this value, it will be killed forcefully.\n\n    Important notes:\n    1. Try to constrain/limit the output. Output processing is expensive, and infinite/looping output will cause us to fail.\n    2. When using commands like 'find', 'grep', or similar recursive search tools, always exclude common\n       development directories and files that can cause excessive output or slow performance:\n       - Version control: .git\n       - Dependencies: node_modules, vendor, .venv\n       - Cache: __pycache__, .cache\n       - Build: dist, build\n       - Environment: .env, venv, env\n       - IDE: .idea, .vscode\n    3. Avoid doing recursive lists, finds, etc. that could be slow and have a ton of output. Likewise, avoid flags like '-l' that needlessly increase the output. But if you really need to, you can.\n    4. Add flags e.g. git --no-pager in order to reduce interaction required by the human.", 'input_schema': {'properties': {'command': {'type': 'string'}, 'timeout': {'default': 30, 'type': 'integer'}}, 'required': ['command'], 'type': 'object'}}, {'name': 'emit_research_notes', 'description': 'Use this when you have completed your research to share your notes in markdown format.\n\n    Keep your research notes information dense and no more than 300 words.\n\n    Args:\n        notes: REQUIRED The research notes to store', 'input_schema': {'properties': {'notes': {'type': 'string'}}, 'required': ['notes'], 'type': 'object'}}, {'name': 'mark_research_complete_no_implementation_required', 'description': 'Mark the current research task as complete with no implementation required.\n\n    Use this when research is complete and it has been determined that no implementation \n    is needed or possible. The agent will exit after calling this tool.\n\n    Args:\n        message: Message explaining why no implementation is required.', 'input_schema': {'properties': {'message': {'type': 'string'}}, 'required': ['message'], 'type': 'object'}}, {'name': 'request_implementation', 'description': 'Spawn a planning agent to create an implementation plan for the given task.\n\n    Args:\n        task_spec: The task specification to plan implementation for', 'input_schema': {'properties': {'task_spec': {'type': 'string'}}, 'required': ['task_spec'], 'type': 'object'}}, {'name': 'emit_expert_context', 'description': 'Add context for the next expert question.\n\n    This should be highly detailed contents such as entire sections of source code, etc.\n\n    Do not include your question in the additional context.\n\n    Err on the side of adding more context rather than less, but keep it information dense and under 500 words total.\n\n    You must give the complete contents.\n\n    Expert context will be reset after the ask_expert tool is called.\n\n    Args:\n        context: The context to add', 'input_schema': {'properties': {'context': {'type': 'string'}}, 'required': ['context'], 'type': 'object'}}, {'name': 'ask_expert', 'description': "Ask a question to an expert AI model.\n\n    Keep your questions specific, but long and detailed.\n\n    You only query the expert when you have a specific question in mind.\n\n    The expert can be extremely useful at logic questions, debugging, and reviewing complex source code, but you must provide all context including source manually.\n\n    The expert can see any key facts and code snippets previously noted, along with any additional context you've provided.\n      But the expert cannot see or reason about anything you have not explicitly provided in this way.\n\n    Try to phrase your question in a way that it does not expand the scope of our top-level task.\n\n    The expert can be prone to overthinking depending on what and how you ask it.", 'input_schema': {'properties': {'question': {'type': 'string'}}, 'required': ['question'], 'type': 'object'}}, {'name': 'request_research', 'description': 'Spawn a research-only agent to investigate the given query.\n\n    This function creates a new research agent to investigate the given query. It includes\n    recursion depth limiting to prevent infinite recursive research calls.\n\n    Args:\n        query: The research question or project description', 'input_schema': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}]}}
2025-04-01 10:54:23,636 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-04-01 10:54:23,636 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-04-01 10:54:23,637 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-04-01 10:54:23,637 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-04-01 10:54:23,663 - httpcore.http11 - DEBUG - send_request_body.complete
2025-04-01 10:54:23,663 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-04-01 10:54:31,206 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 01 Apr 2025 13:54:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-requests-limit', b'1000'), (b'anthropic-ratelimit-requests-remaining', b'999'), (b'anthropic-ratelimit-requests-reset', b'2025-04-01T13:54:23Z'), (b'anthropic-ratelimit-input-tokens-limit', b'40000'), (b'anthropic-ratelimit-input-tokens-remaining', b'0'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-04-01T13:56:41Z'), (b'anthropic-ratelimit-output-tokens-limit', b'16000'), (b'anthropic-ratelimit-output-tokens-remaining', b'16000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-04-01T13:54:31Z'), (b'anthropic-ratelimit-tokens-limit', b'56000'), (b'anthropic-ratelimit-tokens-remaining', b'16000'), (b'anthropic-ratelimit-tokens-reset', b'2025-04-01T13:54:31Z'), (b'request-id', b'req_01TZRsEVCTfLWCyAPTLGhTbc'), (b'anthropic-organization-id', b'35cc1445-9940-4933-8d6e-6601fd32386d'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'92989401fd4f623c-GRU'), (b'Content-Encoding', b'gzip')])
2025-04-01 10:54:31,207 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-04-01 10:54:31,208 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-04-01 10:54:31,208 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-04-01 10:54:31,208 - httpcore.http11 - DEBUG - response_closed.started
2025-04-01 10:54:31,208 - httpcore.http11 - DEBUG - response_closed.complete
2025-04-01 10:54:31,208 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Tue, 01 Apr 2025 13:54:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-requests-limit': '1000', 'anthropic-ratelimit-requests-remaining': '999', 'anthropic-ratelimit-requests-reset': '2025-04-01T13:54:23Z', 'anthropic-ratelimit-input-tokens-limit': '40000', 'anthropic-ratelimit-input-tokens-remaining': '0', 'anthropic-ratelimit-input-tokens-reset': '2025-04-01T13:56:41Z', 'anthropic-ratelimit-output-tokens-limit': '16000', 'anthropic-ratelimit-output-tokens-remaining': '16000', 'anthropic-ratelimit-output-tokens-reset': '2025-04-01T13:54:31Z', 'anthropic-ratelimit-tokens-limit': '56000', 'anthropic-ratelimit-tokens-remaining': '16000', 'anthropic-ratelimit-tokens-reset': '2025-04-01T13:54:31Z', 'request-id': 'req_01TZRsEVCTfLWCyAPTLGhTbc', 'anthropic-organization-id': '35cc1445-9940-4933-8d6e-6601fd32386d', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '92989401fd4f623c-GRU', 'content-encoding': 'gzip'})
2025-04-01 10:54:31,208 - anthropic._base_client - DEBUG - request_id: req_01TZRsEVCTfLWCyAPTLGhTbc
2025-04-01 10:54:31,211 - ra_aid.ra_aid.agent_utils - DEBUG - Agent output: {'agent': {'messages': [AIMessage(content=[{'text': 'Let me look at the other component file:', 'type': 'text'}, {'id': 'toolu_01FTYJ6fX9GfV3ukCeV9owJZ', 'input': {'filepath': 'src/components/PrevCalculator/DataVisualizer.tsx'}, 'name': 'read_file_tool', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01W1eRNwGHjyqnP3XKRECaLM', 'model': 'claude-3-7-sonnet-20250219', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 52438, 'output_tokens': 80}, 'model_name': 'claude-3-7-sonnet-20250219'}, name='claude-3-7-sonnet-20250219', id='run-a7111f96-2579-4a42-ab47-db3884e22a30-0', tool_calls=[{'name': 'read_file_tool', 'args': {'filepath': 'src/components/PrevCalculator/DataVisualizer.tsx'}, 'id': 'toolu_01FTYJ6fX9GfV3ukCeV9owJZ', 'type': 'tool_call'}], usage_metadata={'input_tokens': 52438, 'output_tokens': 80, 'total_tokens': 52518, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}
2025-04-01 10:54:31,218 - ra_aid.ra_aid.database.connection - INFO - Database connection closed successfully
2025-04-01 10:54:31,299 - httpcore.connection - DEBUG - close.started
2025-04-01 10:54:31,299 - httpcore.connection - DEBUG - close.complete
